// Generated by Haxe
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
(function ($hx_exports, $global) { "use strict";
$hx_exports["promhx"] = $hx_exports["promhx"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var buddy_BuddySuite = function() {
	this.timeoutMs = 5000;
	this.suite = this.currentSuite = new buddy_TestSuite("");
	this.describeQueue = [];
};
buddy_BuddySuite.__name__ = ["buddy","BuddySuite"];
buddy_BuddySuite.prototype = {
	suite: null
	,currentSuite: null
	,describeQueue: null
	,timeoutMs: null
	,describe: function(description,spec,_hasInclude) {
		if(_hasInclude == null) {
			_hasInclude = false;
		}
		var suite = new buddy_TestSuite(description);
		this.currentSuite.specs.add(buddy_TestSpec.Describe(suite,_hasInclude));
		this.describeQueue.push({ suite : suite, spec : spec});
	}
	,xdescribe: function(description,spec,_hasInclude) {
		if(_hasInclude == null) {
			_hasInclude = false;
		}
	}
	,before: function(init) {
		this.beforeEach(init);
	}
	,after: function(init) {
		this.afterEach(init);
	}
	,beforeEach: function(init) {
		this.currentSuite.beforeEach.add(init);
	}
	,beforeAll: function(init) {
		this.currentSuite.beforeAll.add(init);
	}
	,afterEach: function(init) {
		this.currentSuite.afterEach.add(init);
	}
	,afterAll: function(init) {
		this.currentSuite.afterAll.add(init);
	}
	,it: function(desc,spec,_hasInclude) {
		if(_hasInclude == null) {
			_hasInclude = false;
		}
		if(this.currentSuite == this.suite) {
			throw new js__$Boot_HaxeError("Cannot use 'it' outside of a describe block.");
		}
		this.currentSuite.specs.add(buddy_TestSpec.It(desc,spec,_hasInclude));
	}
	,xit: function(desc,spec,_hasInclude) {
		if(_hasInclude == null) {
			_hasInclude = false;
		}
		if(this.currentSuite == this.suite) {
			throw new js__$Boot_HaxeError("Cannot use 'it' outside of a describe block.");
		}
		this.currentSuite.specs.add(buddy_TestSpec.It(desc,null,_hasInclude));
	}
	,fail: null
	,pending: null
	,__class__: buddy_BuddySuite
};
var ContextTest = function() {
	var _gthis = this;
	buddy_BuddySuite.call(this);
	this.describe("A new Mustache.Context",buddy_TestFunc.Sync(function() {
		var context;
		_gthis.beforeEach(buddy_TestFunc.Sync(function() {
			context = new mustache__$Context_ContextImpl({ name : "parent", message : "hi", a : { b : "b"}},null);
		}));
		_gthis.it("is able to lookup properties of its own view",buddy_TestFunc.Sync(function() {
			utest_Assert.equals("parent",context.lookup("name"),null,{ fileName : "ContextTest.hx", lineNumber : 13, className : "ContextTest", methodName : "new"});
		}));
		_gthis.it("is able to lookup nested properties of its own view",buddy_TestFunc.Sync(function() {
			utest_Assert.equals("b",context.lookup("a.b"),null,{ fileName : "ContextTest.hx", lineNumber : 17, className : "ContextTest", methodName : "new"});
		}));
		_gthis.describe("when pushed",buddy_TestFunc.Sync(function() {
			_gthis.beforeEach(buddy_TestFunc.Sync(function() {
				context = new mustache__$Context_ContextImpl({ name : "child", c : { d : "d"}},context);
			}));
			_gthis.it("returns the child context",buddy_TestFunc.Sync(function() {
				utest_Assert.equals("child",context.view.name,null,{ fileName : "ContextTest.hx", lineNumber : 26, className : "ContextTest", methodName : "new"});
				utest_Assert.equals("parent",context.parent.view.name,null,{ fileName : "ContextTest.hx", lineNumber : 27, className : "ContextTest", methodName : "new"});
			}));
			_gthis.it("is able to lookup properties of its own view",buddy_TestFunc.Sync(function() {
				utest_Assert.equals("child",context.lookup("name"),null,{ fileName : "ContextTest.hx", lineNumber : 31, className : "ContextTest", methodName : "new"});
			}));
			_gthis.it("is able to lookup properties of the parent context's view",buddy_TestFunc.Sync(function() {
				utest_Assert.equals("hi",context.lookup("message"),null,{ fileName : "ContextTest.hx", lineNumber : 35, className : "ContextTest", methodName : "new"});
			}));
			_gthis.it("is able to lookup nested properties of its own view",buddy_TestFunc.Sync(function() {
				utest_Assert.equals("d",context.lookup("c.d"),null,{ fileName : "ContextTest.hx", lineNumber : 39, className : "ContextTest", methodName : "new"});
			}));
			_gthis.it("is able to lookup nested properties of its parent view",buddy_TestFunc.Sync(function() {
				utest_Assert.equals("b",context.lookup("a.b"),null,{ fileName : "ContextTest.hx", lineNumber : 43, className : "ContextTest", methodName : "new"});
			}));
		}));
	}));
};
ContextTest.__name__ = ["ContextTest"];
ContextTest.__super__ = buddy_BuddySuite;
ContextTest.prototype = $extend(buddy_BuddySuite.prototype,{
	__class__: ContextTest
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0?s:HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0?HxOverrides.substr(s,pos,null):HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var tmp = $iterator(it)();
	while(tmp.hasNext()) a.push(tmp.next());
	return a;
};
Lambda.has = function(it,elt) {
	var tmp = $iterator(it)();
	while(tmp.hasNext()) if(tmp.next() == elt) {
		return true;
	}
	return false;
};
Lambda.exists = function(it,f) {
	var tmp = $iterator(it)();
	while(tmp.hasNext()) if(f(tmp.next())) {
		return true;
	}
	return false;
};
Lambda.iter = function(it,f) {
	var tmp = $iterator(it)();
	while(tmp.hasNext()) f(tmp.next());
};
Lambda.filter = function(it,f) {
	var l = new List();
	var tmp = $iterator(it)();
	while(tmp.hasNext()) {
		var x = tmp.next();
		if(f(x)) {
			l.add(x);
		}
	}
	return l;
};
Lambda.empty = function(it) {
	return !$iterator(it)().hasNext();
};
var List = function() {
	this.length = 0;
};
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,filter: function(f) {
		var l2 = new List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			if(f(v)) {
				l2.add(v);
			}
		}
		return l2;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
Math.__name__ = ["Math"];
var mustache_Writer = function() {
	this.cache = new haxe_ds_StringMap();
};
mustache_Writer.__name__ = ["mustache","Writer"];
mustache_Writer.prototype = {
	cache: null
	,clearCache: function() {
		this.cache = new haxe_ds_StringMap();
	}
	,parse: function(template,tags) {
		var _this = this.cache;
		var tokens = __map_reserved[template] != null?_this.getReserved(template):_this.h[template];
		if(tokens == null) {
			var v = Mustache.parseTemplate(template,tags);
			var _this1 = this.cache;
			if(__map_reserved[template] != null) {
				_this1.setReserved(template,v);
			} else {
				_this1.h[template] = v;
			}
			tokens = v;
		}
		return tokens;
	}
	,render: function(template,context,partials) {
		return this.renderTokens(this.parse(template),context,partials,template);
	}
	,renderTokens: function(tokens,context,partials,originalTemplate) {
		var buffer = "";
		var _g = 0;
		while(_g < tokens.length) {
			var token = tokens[_g];
			++_g;
			var value;
			var _g1 = token.type;
			switch(_g1[1]) {
			case 0:
				value = token.value;
				break;
			case 1:
				var $escape = _g1[2];
				var value1 = context.lookup(token.value);
				if(value1 == null) {
					value = null;
				} else if($escape) {
					value = Mustache.escape(Std.string(value1));
				} else {
					value = Std.string(value1);
				}
				break;
			case 2:
				if(_g1[2]) {
					value = this.renderInverted(token,context,partials,originalTemplate);
				} else {
					value = this.renderSection(token,context,partials,originalTemplate);
				}
				break;
			case 4:
				value = this.renderPartial(token,context,partials);
				break;
			case 3:case 5:case 6:
				continue;
				break;
			}
			if(value != null) {
				buffer += value;
			}
		}
		return buffer;
	}
	,renderSection: function(token,context,partials,originalTemplate) {
		var _gthis = this;
		var _g = Mustache.getSectionValueKind(context.lookup(token.value));
		switch(_g[1]) {
		case 0:
			return null;
		case 1:
			var arr = _g[2];
			var buffer = "";
			var len = arr.length;
			var _g1 = 0;
			while(_g1 < len) buffer += this.renderTokens(token.subTokens,new mustache__$Context_ContextImpl(arr[_g1++],context),partials,originalTemplate);
			return buffer;
		case 2:
			return this.renderTokens(token.subTokens,new mustache__$Context_ContextImpl(_g[2],context),partials,originalTemplate);
		case 3:
			return this.renderTokens(token.subTokens,context,partials,originalTemplate);
		case 4:
			return _g[2](context.view,originalTemplate.substring(token.endIndex,token.sectionEndIndex),function(template) {
				return _gthis.render(template,context,partials);
			});
		}
	}
	,renderInverted: function(token,context,partials,originalTemplate) {
		if(Mustache.getSectionValueKind(context.lookup(token.value))[1] == 0) {
			return this.renderTokens(token.subTokens,context,partials,originalTemplate);
		} else {
			return null;
		}
	}
	,renderPartial: function(token,context,partials) {
		if(partials == null) {
			return null;
		}
		var value = partials(token.value);
		if(value != null) {
			return this.renderTokens(this.parse(value),context,partials,value);
		}
		return null;
	}
	,__class__: mustache_Writer
};
var Mustache = function() { };
Mustache.__name__ = ["Mustache"];
Mustache.render = function(template,context,partials) {
	var _this = Mustache.defaultWriter;
	return _this.renderTokens(_this.parse(template),context,partials,template);
};
Mustache.parse = function(template,tags) {
	return Mustache.defaultWriter.parse(template,tags);
};
Mustache.clearCache = function() {
	Mustache.defaultWriter.cache = new haxe_ds_StringMap();
};
Mustache.parseTemplate = function(template,tags) {
	if(template.length == 0) {
		return [];
	}
	var sections = [];
	var tokens = [];
	var spaces = [];
	var hasTag = false;
	var nonSpace = false;
	var openingTagRe;
	var closingTagRe;
	var closingCurlyRe;
	var compileTags = function(tagsToCompile) {
		if(tagsToCompile.length != 2) {
			throw new js__$Boot_HaxeError("Invalid tags: " + Std.string(tagsToCompile));
		}
		openingTagRe = new EReg(Mustache.escapeRegExp(tagsToCompile[0]) + "\\s*","");
		closingTagRe = new EReg("\\s*" + Mustache.escapeRegExp(tagsToCompile[1]),"");
		closingCurlyRe = new EReg("\\s*" + Mustache.escapeRegExp("}" + tagsToCompile[1]),"");
	};
	compileTags(tags != null?tags:Mustache.tags);
	var scanner = new mustache_Scanner(template);
	while(scanner.tail != "") {
		var start = scanner.pos;
		var value = scanner.scanUntil(openingTagRe);
		if(value.length > 0) {
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var chr = value.charAt(_g1++);
				if(!Mustache.nonSpaceRe.match(chr)) {
					spaces.push(tokens.length);
				} else {
					nonSpace = true;
				}
				tokens.push(new mustache_Token(mustache_TokenType.Text,chr,start,start + 1));
				++start;
				if(chr == "\n") {
					if(hasTag && !nonSpace) {
						while(spaces.length > 0) tokens[spaces.pop()] = null;
					} else {
						spaces = [];
					}
					hasTag = false;
					nonSpace = false;
				}
			}
		}
		if(scanner.scan(openingTagRe).length == 0) {
			break;
		}
		hasTag = true;
		var type = scanner.scan(Mustache.tagRe);
		if(type.length == 0) {
			type = "name";
		}
		scanner.scan(Mustache.whiteRe);
		if(type == "=") {
			value = scanner.scanUntil(Mustache.equalsRe);
			scanner.scan(Mustache.equalsRe);
			scanner.scanUntil(closingTagRe);
		} else if(type == "{") {
			value = scanner.scanUntil(closingCurlyRe);
			scanner.scan(Mustache.curlyRe);
			scanner.scanUntil(closingTagRe);
			type = "&";
		} else {
			value = scanner.scanUntil(closingTagRe);
		}
		if(scanner.scan(closingTagRe).length == 0) {
			throw new js__$Boot_HaxeError("Unclosed tag at " + scanner.pos);
		}
		var tokenType;
		switch(type) {
		case "!":
			tokenType = mustache_TokenType.Comment;
			break;
		case "#":
			tokenType = mustache_TokenType.Section(false);
			break;
		case "&":
			tokenType = mustache_TokenType.Value(false);
			break;
		case "/":
			tokenType = mustache_TokenType.SectionClose;
			break;
		case "=":
			tokenType = mustache_TokenType.SetDelimiters;
			break;
		case ">":
			tokenType = mustache_TokenType.Partial;
			break;
		case "^":
			tokenType = mustache_TokenType.Section(true);
			break;
		case "name":
			tokenType = mustache_TokenType.Value(true);
			break;
		default:
			throw new js__$Boot_HaxeError("unknown token type: " + type);
		}
		var token = new mustache_Token(tokenType,value,start,scanner.pos);
		tokens.push(token);
		switch(tokenType[1]) {
		case 1:
			nonSpace = true;
			break;
		case 2:
			sections.push(token);
			break;
		case 3:
			var openSection = sections.pop();
			if(openSection == null) {
				throw new js__$Boot_HaxeError("Unopened section \"" + value + "\" at " + start);
			}
			if(openSection.value != value) {
				throw new js__$Boot_HaxeError("Unclosed section \"" + openSection.value + "\" at " + start);
			}
			break;
		case 6:
			compileTags(Mustache.spaceRe.split(value));
			break;
		default:
		}
	}
	var openSection1 = sections.pop();
	if(openSection1 != null) {
		throw new js__$Boot_HaxeError("Unclosed section \"" + openSection1.value + "\" at " + scanner.pos);
	}
	return Mustache.nestTokens(Mustache.squashTokens(tokens));
};
Mustache.squashTokens = function(tokens) {
	var squashedTokens = [];
	var lastToken = null;
	var _g = 0;
	while(_g < tokens.length) {
		var token = tokens[_g];
		++_g;
		if(token != null) {
			if(token.type == mustache_TokenType.Text && lastToken != null && lastToken.type == mustache_TokenType.Text) {
				lastToken.value += token.value;
				lastToken.endIndex = token.endIndex;
			} else {
				squashedTokens.push(token);
				lastToken = token;
			}
		}
	}
	return squashedTokens;
};
Mustache.nestTokens = function(tokens) {
	var nestedTokens = [];
	var collector = nestedTokens;
	var sections = [];
	var _g = 0;
	while(_g < tokens.length) {
		var token = tokens[_g];
		++_g;
		switch(token.type[1]) {
		case 2:
			collector.push(token);
			sections.push(token);
			collector = token.subTokens = [];
			break;
		case 3:
			var section = sections.pop();
			section.sectionEndIndex = token.startIndex;
			if(sections.length > 0) {
				collector = sections[sections.length - 1].subTokens;
			} else {
				collector = nestedTokens;
			}
			break;
		default:
			collector.push(token);
		}
	}
	return nestedTokens;
};
Mustache.escapeRegExp = function(string) {
	return Mustache.escapeRegExpRe.map(string,function(r) {
		return "\\" + r.matched(0);
	});
};
Mustache.isWhitespace = function(string) {
	return !Mustache.nonSpaceRe.match(string);
};
Mustache.escape = function(string) {
	return Mustache.escapeRe.map(string,function(re) {
		var key = re.matched(0);
		var _this = Mustache.entityMap;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	});
};
Mustache.getSectionValueKind = function(value) {
	if(value == null) {
		return SectionValueKind.KFalsy;
	}
	if(typeof(value) == "boolean") {
		if(value) {
			return SectionValueKind.KBasic;
		} else {
			return SectionValueKind.KFalsy;
		}
	}
	if(typeof(value) == "number") {
		if(value != 0) {
			return SectionValueKind.KBasic;
		} else {
			return SectionValueKind.KFalsy;
		}
	}
	var value1 = value;
	var str = (value1 instanceof String)?value1:null;
	if(str != null) {
		if(str.length > 0) {
			return SectionValueKind.KObject(str);
		} else {
			return SectionValueKind.KFalsy;
		}
	}
	var value2 = value;
	var arr = (value2 instanceof Array)?value2:null;
	if(arr != null) {
		if(arr.length > 0) {
			return SectionValueKind.KArray(arr);
		} else {
			return SectionValueKind.KFalsy;
		}
	}
	if(Reflect.isFunction(value)) {
		return SectionValueKind.KFunction(value);
	}
	if(Reflect.isObject(value)) {
		return SectionValueKind.KObject(value);
	}
	return SectionValueKind.KBasic;
};
var SectionValueKind = { __ename__ : ["SectionValueKind"], __constructs__ : ["KFalsy","KArray","KObject","KBasic","KFunction"] };
SectionValueKind.KFalsy = ["KFalsy",0];
SectionValueKind.KFalsy.toString = $estr;
SectionValueKind.KFalsy.__enum__ = SectionValueKind;
SectionValueKind.KArray = function(a) { var $x = ["KArray",1,a]; $x.__enum__ = SectionValueKind; $x.toString = $estr; return $x; };
SectionValueKind.KObject = function(o) { var $x = ["KObject",2,o]; $x.__enum__ = SectionValueKind; $x.toString = $estr; return $x; };
SectionValueKind.KBasic = ["KBasic",3];
SectionValueKind.KBasic.toString = $estr;
SectionValueKind.KBasic.__enum__ = SectionValueKind;
SectionValueKind.KFunction = function(f) { var $x = ["KFunction",4,f]; $x.__enum__ = SectionValueKind; $x.toString = $estr; return $x; };
var ParseTest = function() {
	var _gthis = this;
	buddy_BuddySuite.call(this);
	var _g = new haxe_ds_StringMap();
	var value = [];
	if(__map_reserved[""] != null) {
		_g.setReserved("",value);
	} else {
		_g.h[""] = value;
	}
	var value1 = [new mustache_Token(mustache_TokenType.Value(true),"hi",0,6)];
	if(__map_reserved["{{hi}}"] != null) {
		_g.setReserved("{{hi}}",value1);
	} else {
		_g.h["{{hi}}"] = value1;
	}
	var value2 = [new mustache_Token(mustache_TokenType.Value(true),"hi.world",0,12)];
	if(__map_reserved["{{hi.world}}"] != null) {
		_g.setReserved("{{hi.world}}",value2);
	} else {
		_g.h["{{hi.world}}"] = value2;
	}
	var value3 = [new mustache_Token(mustache_TokenType.Value(true),"hi . world",0,14)];
	if(__map_reserved["{{hi . world}}"] != null) {
		_g.setReserved("{{hi . world}}",value3);
	} else {
		_g.h["{{hi . world}}"] = value3;
	}
	var value4 = [new mustache_Token(mustache_TokenType.Value(true),"hi",0,7)];
	if(__map_reserved["{{ hi}}"] != null) {
		_g.setReserved("{{ hi}}",value4);
	} else {
		_g.h["{{ hi}}"] = value4;
	}
	var value5 = [new mustache_Token(mustache_TokenType.Value(true),"hi",0,7)];
	if(__map_reserved["{{hi }}"] != null) {
		_g.setReserved("{{hi }}",value5);
	} else {
		_g.h["{{hi }}"] = value5;
	}
	var value6 = [new mustache_Token(mustache_TokenType.Value(true),"hi",0,8)];
	if(__map_reserved["{{ hi }}"] != null) {
		_g.setReserved("{{ hi }}",value6);
	} else {
		_g.h["{{ hi }}"] = value6;
	}
	var value7 = [new mustache_Token(mustache_TokenType.Value(false),"hi",0,8)];
	if(__map_reserved["{{{hi}}}"] != null) {
		_g.setReserved("{{{hi}}}",value7);
	} else {
		_g.h["{{{hi}}}"] = value7;
	}
	var value8 = [new mustache_Token(mustache_TokenType.Comment,"hi",0,7)];
	if(__map_reserved["{{!hi}}"] != null) {
		_g.setReserved("{{!hi}}",value8);
	} else {
		_g.h["{{!hi}}"] = value8;
	}
	var value9 = [new mustache_Token(mustache_TokenType.Comment,"hi",0,8)];
	if(__map_reserved["{{! hi}}"] != null) {
		_g.setReserved("{{! hi}}",value9);
	} else {
		_g.h["{{! hi}}"] = value9;
	}
	var value10 = [new mustache_Token(mustache_TokenType.Comment,"hi",0,9)];
	if(__map_reserved["{{! hi }}"] != null) {
		_g.setReserved("{{! hi }}",value10);
	} else {
		_g.h["{{! hi }}"] = value10;
	}
	var value11 = [new mustache_Token(mustache_TokenType.Comment,"hi",0,8)];
	if(__map_reserved["{{ !hi}}"] != null) {
		_g.setReserved("{{ !hi}}",value11);
	} else {
		_g.h["{{ !hi}}"] = value11;
	}
	var value12 = [new mustache_Token(mustache_TokenType.Comment,"hi",0,9)];
	if(__map_reserved["{{ ! hi}}"] != null) {
		_g.setReserved("{{ ! hi}}",value12);
	} else {
		_g.h["{{ ! hi}}"] = value12;
	}
	var value13 = [new mustache_Token(mustache_TokenType.Comment,"hi",0,10)];
	if(__map_reserved["{{ ! hi }}"] != null) {
		_g.setReserved("{{ ! hi }}",value13);
	} else {
		_g.h["{{ ! hi }}"] = value13;
	}
	var value14 = [new mustache_Token(mustache_TokenType.Text,"a\n b",0,4)];
	if(__map_reserved["a\n b"] != null) {
		_g.setReserved("a\n b",value14);
	} else {
		_g.h["a\n b"] = value14;
	}
	var value15 = [new mustache_Token(mustache_TokenType.Text,"a",0,1),new mustache_Token(mustache_TokenType.Value(true),"hi",1,7)];
	if(__map_reserved["a{{hi}}"] != null) {
		_g.setReserved("a{{hi}}",value15);
	} else {
		_g.h["a{{hi}}"] = value15;
	}
	var value16 = [new mustache_Token(mustache_TokenType.Text,"a ",0,2),new mustache_Token(mustache_TokenType.Value(true),"hi",2,8)];
	if(__map_reserved["a {{hi}}"] != null) {
		_g.setReserved("a {{hi}}",value16);
	} else {
		_g.h["a {{hi}}"] = value16;
	}
	var value17 = [new mustache_Token(mustache_TokenType.Text," a",0,2),new mustache_Token(mustache_TokenType.Value(true),"hi",2,8)];
	if(__map_reserved[" a{{hi}}"] != null) {
		_g.setReserved(" a{{hi}}",value17);
	} else {
		_g.h[" a{{hi}}"] = value17;
	}
	var value18 = [new mustache_Token(mustache_TokenType.Text," a ",0,3),new mustache_Token(mustache_TokenType.Value(true),"hi",3,9)];
	if(__map_reserved[" a {{hi}}"] != null) {
		_g.setReserved(" a {{hi}}",value18);
	} else {
		_g.h[" a {{hi}}"] = value18;
	}
	var value19 = [new mustache_Token(mustache_TokenType.Text,"a",0,1),new mustache_Token(mustache_TokenType.Value(true),"hi",1,7),new mustache_Token(mustache_TokenType.Text,"b",7,8)];
	if(__map_reserved["a{{hi}}b"] != null) {
		_g.setReserved("a{{hi}}b",value19);
	} else {
		_g.h["a{{hi}}b"] = value19;
	}
	var value20 = [new mustache_Token(mustache_TokenType.Text,"a",0,1),new mustache_Token(mustache_TokenType.Value(true),"hi",1,7),new mustache_Token(mustache_TokenType.Text," b",7,9)];
	if(__map_reserved["a{{hi}} b"] != null) {
		_g.setReserved("a{{hi}} b",value20);
	} else {
		_g.h["a{{hi}} b"] = value20;
	}
	var value21 = [new mustache_Token(mustache_TokenType.Text,"a",0,1),new mustache_Token(mustache_TokenType.Value(true),"hi",1,7),new mustache_Token(mustache_TokenType.Text,"b ",7,9)];
	if(__map_reserved["a{{hi}}b "] != null) {
		_g.setReserved("a{{hi}}b ",value21);
	} else {
		_g.h["a{{hi}}b "] = value21;
	}
	var value22 = [new mustache_Token(mustache_TokenType.Text,"a\n",0,2),new mustache_Token(mustache_TokenType.Value(true),"hi",2,8),new mustache_Token(mustache_TokenType.Text," b \n",8,12)];
	if(__map_reserved["a\n{{hi}} b \n"] != null) {
		_g.setReserved("a\n{{hi}} b \n",value22);
	} else {
		_g.h["a\n{{hi}} b \n"] = value22;
	}
	var value23 = [new mustache_Token(mustache_TokenType.Text,"a\n ",0,3),new mustache_Token(mustache_TokenType.Value(true),"hi",3,9),new mustache_Token(mustache_TokenType.Text," \nb",9,12)];
	if(__map_reserved["a\n {{hi}} \nb"] != null) {
		_g.setReserved("a\n {{hi}} \nb",value23);
	} else {
		_g.h["a\n {{hi}} \nb"] = value23;
	}
	var value24 = [new mustache_Token(mustache_TokenType.Text,"a\n",0,2),new mustache_Token(mustache_TokenType.Comment,"hi",3,10),new mustache_Token(mustache_TokenType.Text,"b",12,13)];
	if(__map_reserved["a\n {{!hi}} \nb"] != null) {
		_g.setReserved("a\n {{!hi}} \nb",value24);
	} else {
		_g.h["a\n {{!hi}} \nb"] = value24;
	}
	var value25 = [new mustache_Token(mustache_TokenType.Text,"a\n",0,2),new mustache_Token(mustache_TokenType.Section(false),"a",2,8,[],8),new mustache_Token(mustache_TokenType.Text,"b",15,16)];
	if(__map_reserved["a\n{{#a}}{{/a}}\nb"] != null) {
		_g.setReserved("a\n{{#a}}{{/a}}\nb",value25);
	} else {
		_g.h["a\n{{#a}}{{/a}}\nb"] = value25;
	}
	var value26 = [new mustache_Token(mustache_TokenType.Text,"a\n",0,2),new mustache_Token(mustache_TokenType.Section(false),"a",3,9,[],9),new mustache_Token(mustache_TokenType.Text,"b",16,17)];
	if(__map_reserved["a\n {{#a}}{{/a}}\nb"] != null) {
		_g.setReserved("a\n {{#a}}{{/a}}\nb",value26);
	} else {
		_g.h["a\n {{#a}}{{/a}}\nb"] = value26;
	}
	var value27 = [new mustache_Token(mustache_TokenType.Text,"a\n",0,2),new mustache_Token(mustache_TokenType.Section(false),"a",3,9,[],9),new mustache_Token(mustache_TokenType.Text,"b",17,18)];
	if(__map_reserved["a\n {{#a}}{{/a}} \nb"] != null) {
		_g.setReserved("a\n {{#a}}{{/a}} \nb",value27);
	} else {
		_g.h["a\n {{#a}}{{/a}} \nb"] = value27;
	}
	var value28 = [new mustache_Token(mustache_TokenType.Text,"a\n",0,2),new mustache_Token(mustache_TokenType.Section(false),"a",2,8,[],9),new mustache_Token(mustache_TokenType.Text,"b",16,17)];
	if(__map_reserved["a\n{{#a}}\n{{/a}}\nb"] != null) {
		_g.setReserved("a\n{{#a}}\n{{/a}}\nb",value28);
	} else {
		_g.h["a\n{{#a}}\n{{/a}}\nb"] = value28;
	}
	var value29 = [new mustache_Token(mustache_TokenType.Text,"a\n",0,2),new mustache_Token(mustache_TokenType.Section(false),"a",3,9,[],10),new mustache_Token(mustache_TokenType.Text,"b",17,18)];
	if(__map_reserved["a\n {{#a}}\n{{/a}}\nb"] != null) {
		_g.setReserved("a\n {{#a}}\n{{/a}}\nb",value29);
	} else {
		_g.h["a\n {{#a}}\n{{/a}}\nb"] = value29;
	}
	var value30 = [new mustache_Token(mustache_TokenType.Text,"a\n",0,2),new mustache_Token(mustache_TokenType.Section(false),"a",3,9,[],10),new mustache_Token(mustache_TokenType.Text,"b",18,19)];
	if(__map_reserved["a\n {{#a}}\n{{/a}} \nb"] != null) {
		_g.setReserved("a\n {{#a}}\n{{/a}} \nb",value30);
	} else {
		_g.h["a\n {{#a}}\n{{/a}} \nb"] = value30;
	}
	var value31 = [new mustache_Token(mustache_TokenType.Text,"a\n",0,2),new mustache_Token(mustache_TokenType.Section(false),"a",2,8,[],9),new mustache_Token(mustache_TokenType.Section(false),"b",16,22,[],23),new mustache_Token(mustache_TokenType.Text,"b",30,31)];
	if(__map_reserved["a\n{{#a}}\n{{/a}}\n{{#b}}\n{{/b}}\nb"] != null) {
		_g.setReserved("a\n{{#a}}\n{{/a}}\n{{#b}}\n{{/b}}\nb",value31);
	} else {
		_g.h["a\n{{#a}}\n{{/a}}\n{{#b}}\n{{/b}}\nb"] = value31;
	}
	var value32 = [new mustache_Token(mustache_TokenType.Text,"a\n",0,2),new mustache_Token(mustache_TokenType.Section(false),"a",3,9,[],10),new mustache_Token(mustache_TokenType.Section(false),"b",17,23,[],24),new mustache_Token(mustache_TokenType.Text,"b",31,32)];
	if(__map_reserved["a\n {{#a}}\n{{/a}}\n{{#b}}\n{{/b}}\nb"] != null) {
		_g.setReserved("a\n {{#a}}\n{{/a}}\n{{#b}}\n{{/b}}\nb",value32);
	} else {
		_g.h["a\n {{#a}}\n{{/a}}\n{{#b}}\n{{/b}}\nb"] = value32;
	}
	var value33 = [new mustache_Token(mustache_TokenType.Text,"a\n",0,2),new mustache_Token(mustache_TokenType.Section(false),"a",3,9,[],10),new mustache_Token(mustache_TokenType.Section(false),"b",17,23,[],24),new mustache_Token(mustache_TokenType.Text,"b",32,33)];
	if(__map_reserved["a\n {{#a}}\n{{/a}}\n{{#b}}\n{{/b}} \nb"] != null) {
		_g.setReserved("a\n {{#a}}\n{{/a}}\n{{#b}}\n{{/b}} \nb",value33);
	} else {
		_g.h["a\n {{#a}}\n{{/a}}\n{{#b}}\n{{/b}} \nb"] = value33;
	}
	var value34 = [new mustache_Token(mustache_TokenType.Text,"a\n",0,2),new mustache_Token(mustache_TokenType.Section(false),"a",2,8,[new mustache_Token(mustache_TokenType.Section(false),"b",9,15,[],16)],23),new mustache_Token(mustache_TokenType.Text,"b",30,31)];
	if(__map_reserved["a\n{{#a}}\n{{#b}}\n{{/b}}\n{{/a}}\nb"] != null) {
		_g.setReserved("a\n{{#a}}\n{{#b}}\n{{/b}}\n{{/a}}\nb",value34);
	} else {
		_g.h["a\n{{#a}}\n{{#b}}\n{{/b}}\n{{/a}}\nb"] = value34;
	}
	var value35 = [new mustache_Token(mustache_TokenType.Text,"a\n",0,2),new mustache_Token(mustache_TokenType.Section(false),"a",3,9,[new mustache_Token(mustache_TokenType.Section(false),"b",10,16,[],17)],24),new mustache_Token(mustache_TokenType.Text,"b",31,32)];
	if(__map_reserved["a\n {{#a}}\n{{#b}}\n{{/b}}\n{{/a}}\nb"] != null) {
		_g.setReserved("a\n {{#a}}\n{{#b}}\n{{/b}}\n{{/a}}\nb",value35);
	} else {
		_g.h["a\n {{#a}}\n{{#b}}\n{{/b}}\n{{/a}}\nb"] = value35;
	}
	var value36 = [new mustache_Token(mustache_TokenType.Text,"a\n",0,2),new mustache_Token(mustache_TokenType.Section(false),"a",3,9,[new mustache_Token(mustache_TokenType.Section(false),"b",10,16,[],17)],24),new mustache_Token(mustache_TokenType.Text,"b",32,33)];
	if(__map_reserved["a\n {{#a}}\n{{#b}}\n{{/b}}\n{{/a}} \nb"] != null) {
		_g.setReserved("a\n {{#a}}\n{{#b}}\n{{/b}}\n{{/a}} \nb",value36);
	} else {
		_g.h["a\n {{#a}}\n{{#b}}\n{{/b}}\n{{/a}} \nb"] = value36;
	}
	var value37 = [new mustache_Token(mustache_TokenType.Partial,"abc",0,8)];
	if(__map_reserved["{{>abc}}"] != null) {
		_g.setReserved("{{>abc}}",value37);
	} else {
		_g.h["{{>abc}}"] = value37;
	}
	var value38 = [new mustache_Token(mustache_TokenType.Partial,"abc",0,10)];
	if(__map_reserved["{{> abc }}"] != null) {
		_g.setReserved("{{> abc }}",value38);
	} else {
		_g.h["{{> abc }}"] = value38;
	}
	var value39 = [new mustache_Token(mustache_TokenType.Partial,"abc",0,11)];
	if(__map_reserved["{{ > abc }}"] != null) {
		_g.setReserved("{{ > abc }}",value39);
	} else {
		_g.h["{{ > abc }}"] = value39;
	}
	var value40 = [new mustache_Token(mustache_TokenType.SetDelimiters,"<% %>",0,11)];
	if(__map_reserved["{{=<% %>=}}"] != null) {
		_g.setReserved("{{=<% %>=}}",value40);
	} else {
		_g.h["{{=<% %>=}}"] = value40;
	}
	var value41 = [new mustache_Token(mustache_TokenType.SetDelimiters,"<% %>",0,13)];
	if(__map_reserved["{{= <% %> =}}"] != null) {
		_g.setReserved("{{= <% %> =}}",value41);
	} else {
		_g.h["{{= <% %> =}}"] = value41;
	}
	var value42 = [new mustache_Token(mustache_TokenType.SetDelimiters,"<% %>",0,11),new mustache_Token(mustache_TokenType.SetDelimiters,"{{ }}",11,22)];
	if(__map_reserved["{{=<% %>=}}<%={{ }}=%>"] != null) {
		_g.setReserved("{{=<% %>=}}<%={{ }}=%>",value42);
	} else {
		_g.h["{{=<% %>=}}<%={{ }}=%>"] = value42;
	}
	var value43 = [new mustache_Token(mustache_TokenType.SetDelimiters,"<% %>",0,11),new mustache_Token(mustache_TokenType.Value(true),"hi",11,17)];
	if(__map_reserved["{{=<% %>=}}<%hi%>"] != null) {
		_g.setReserved("{{=<% %>=}}<%hi%>",value43);
	} else {
		_g.h["{{=<% %>=}}<%hi%>"] = value43;
	}
	var value44 = [new mustache_Token(mustache_TokenType.Section(false),"a",0,6,[],6),new mustache_Token(mustache_TokenType.Text,"hi",12,14),new mustache_Token(mustache_TokenType.Section(false),"b",14,20,[],20),new mustache_Token(mustache_TokenType.Text,"\n",26,27)];
	if(__map_reserved["{{#a}}{{/a}}hi{{#b}}{{/b}}\n"] != null) {
		_g.setReserved("{{#a}}{{/a}}hi{{#b}}{{/b}}\n",value44);
	} else {
		_g.h["{{#a}}{{/a}}hi{{#b}}{{/b}}\n"] = value44;
	}
	var value45 = [new mustache_Token(mustache_TokenType.Value(true),"a",0,5),new mustache_Token(mustache_TokenType.Text,"\n",5,6),new mustache_Token(mustache_TokenType.Value(true),"b",6,11),new mustache_Token(mustache_TokenType.Text,"\n\n",11,13),new mustache_Token(mustache_TokenType.Section(false),"c",13,19,[],20)];
	if(__map_reserved["{{a}}\n{{b}}\n\n{{#c}}\n{{/c}}\n"] != null) {
		_g.setReserved("{{a}}\n{{b}}\n\n{{#c}}\n{{/c}}\n",value45);
	} else {
		_g.h["{{a}}\n{{b}}\n\n{{#c}}\n{{/c}}\n"] = value45;
	}
	var value46 = [new mustache_Token(mustache_TokenType.Section(false),"foo",0,8,[new mustache_Token(mustache_TokenType.Section(false),"a",11,17,[new mustache_Token(mustache_TokenType.Text,"    ",18,22),new mustache_Token(mustache_TokenType.Value(true),"b",22,27),new mustache_Token(mustache_TokenType.Text,"\n",27,28)],30)],37)];
	if(__map_reserved["{{#foo}}\n  {{#a}}\n    {{b}}\n  {{/a}}\n{{/foo}}\n"] != null) {
		_g.setReserved("{{#foo}}\n  {{#a}}\n    {{b}}\n  {{/a}}\n{{/foo}}\n",value46);
	} else {
		_g.h["{{#foo}}\n  {{#a}}\n    {{b}}\n  {{/a}}\n{{/foo}}\n"] = value46;
	}
	var expectations = _g;
	this.describe("Mustache.parse",buddy_TestFunc.Sync(function() {
		var tmp = expectations.keys();
		while(tmp.hasNext()) {
			var template = [tmp.next()];
			_gthis.it("knows how to parse " + JSON.stringify(template[0]),buddy_TestFunc.Sync((function(template1) {
				return function() {
					utest_Assert.same(__map_reserved[template1[0]] != null?expectations.getReserved(template1[0]):expectations.h[template1[0]],Mustache.defaultWriter.parse(template1[0],null),null,null,{ fileName : "ParseTest.hx", lineNumber : 75, className : "ParseTest", methodName : "new"});
				};
			})(template)));
		}
		_gthis.describe("when there is an unclosed tag",buddy_TestFunc.Sync(function() {
			_gthis.it("throws an error",buddy_TestFunc.Sync(function() {
				ParseTest["throws"](function() {
					Mustache.defaultWriter.parse("My name is {{name",null);
				},new EReg("unclosed tag at 17","i"));
			}));
		}));
		_gthis.describe("when there is an unclosed section",buddy_TestFunc.Sync(function() {
			_gthis.it("throws an error",buddy_TestFunc.Sync(function() {
				ParseTest["throws"](function() {
					Mustache.defaultWriter.parse("A list: {{#people}}{{name}}",null);
				},new EReg("unclosed section \"people\" at 27","i"));
			}));
		}));
		_gthis.describe("when there is an unopened section",buddy_TestFunc.Sync(function() {
			_gthis.it("throws an error",buddy_TestFunc.Sync(function() {
				ParseTest["throws"](function() {
					Mustache.defaultWriter.parse("The end of the list! {{/people}}",null);
				},new EReg("unopened section \"people\" at 21","i"));
			}));
		}));
		_gthis.describe("when invalid tags are given as an argument",buddy_TestFunc.Sync(function() {
			_gthis.it("throws an error",buddy_TestFunc.Sync(function() {
				ParseTest["throws"](function() {
					Mustache.defaultWriter.parse("A template <% name %>",["<%"]);
				},new EReg("invalid tags","i"));
			}));
		}));
		_gthis.describe("when the template contains invalid tags",buddy_TestFunc.Sync(function() {
			_gthis.it("throws an error",buddy_TestFunc.Sync(function() {
				ParseTest["throws"](function() {
					Mustache.defaultWriter.parse("A template {{=<%=}}",null);
				},new EReg("invalid tags","i"));
			}));
		}));
	}));
};
ParseTest.__name__ = ["ParseTest"];
ParseTest["throws"] = function(fn,re) {
	try {
		fn();
	} catch( $e0 ) {
		haxe_CallStack.lastException = $e0;
		if ($e0 instanceof js__$Boot_HaxeError) $e0 = $e0.val;
		if( js_Boot.__instanceof($e0,String) ) {
			var e = $e0;
			utest_Assert.match(re,e,null,{ fileName : "ParseTest.hx", lineNumber : 9, className : "ParseTest", methodName : "throws"});
			return;
		} else {
		var e1 = $e0;
		throw new js__$Boot_HaxeError("not string thrown");
		}
	}
	throw new js__$Boot_HaxeError("no error thrown");
};
ParseTest.__super__ = buddy_BuddySuite;
ParseTest.prototype = $extend(buddy_BuddySuite.prototype,{
	__class__: ParseTest
});
var Reflect = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
var ScannerTest = function() {
	var _gthis = this;
	buddy_BuddySuite.call(this);
	this.describe("A new Mustache.Scanner",buddy_TestFunc.Sync(function() {
		_gthis.describe("for an empty string",buddy_TestFunc.Sync(function() {
			_gthis.it("is at the end",buddy_TestFunc.Sync(function() {
				utest_Assert.isTrue(new mustache_Scanner("").tail == "",null,{ fileName : "ScannerTest.hx", lineNumber : 11, className : "ScannerTest", methodName : "new"});
			}));
		}));
		_gthis.describe("for a non-empty string",buddy_TestFunc.Sync(function() {
			var scanner;
			_gthis.beforeEach(buddy_TestFunc.Sync(function() {
				scanner = new mustache_Scanner("a b c");
			}));
			_gthis.describe("scan",buddy_TestFunc.Sync(function() {
				_gthis.describe("when the RegExp matches the entire string",buddy_TestFunc.Sync(function() {
					_gthis.it("returns the entire string",buddy_TestFunc.Sync(function() {
						utest_Assert.equals(scanner.string,scanner.scan(new EReg("a b c","")),null,{ fileName : "ScannerTest.hx", lineNumber : 25, className : "ScannerTest", methodName : "new"});
						utest_Assert.isTrue(scanner.tail == "",null,{ fileName : "ScannerTest.hx", lineNumber : 26, className : "ScannerTest", methodName : "new"});
					}));
				}));
				_gthis.describe("when the RegExp matches at index 0",buddy_TestFunc.Sync(function() {
					_gthis.it("returns the portion of the string that matched",buddy_TestFunc.Sync(function() {
						utest_Assert.equals("a",scanner.scan(new EReg("a","")),null,{ fileName : "ScannerTest.hx", lineNumber : 33, className : "ScannerTest", methodName : "new"});
						utest_Assert.equals(1,scanner.pos,null,{ fileName : "ScannerTest.hx", lineNumber : 34, className : "ScannerTest", methodName : "new"});
					}));
				}));
				_gthis.describe("when the RegExp matches at some index other than 0",buddy_TestFunc.Sync(function() {
					_gthis.it("returns the empty string",buddy_TestFunc.Sync(function() {
						utest_Assert.equals("",scanner.scan(new EReg("b","")),null,{ fileName : "ScannerTest.hx", lineNumber : 41, className : "ScannerTest", methodName : "new"});
						utest_Assert.equals(0,scanner.pos,null,{ fileName : "ScannerTest.hx", lineNumber : 42, className : "ScannerTest", methodName : "new"});
					}));
				}));
				_gthis.describe("when the RegExp does not match",buddy_TestFunc.Sync(function() {
					_gthis.it("returns the empty string",buddy_TestFunc.Sync(function() {
						utest_Assert.equals("",scanner.scan(new EReg("z","")),null,{ fileName : "ScannerTest.hx", lineNumber : 49, className : "ScannerTest", methodName : "new"});
						utest_Assert.equals(0,scanner.pos,null,{ fileName : "ScannerTest.hx", lineNumber : 50, className : "ScannerTest", methodName : "new"});
					}));
				}));
			}));
			_gthis.describe("scanUntil",buddy_TestFunc.Sync(function() {
				_gthis.describe("when the RegExp matches at index 0",buddy_TestFunc.Sync(function() {
					_gthis.it("returns the empty string",buddy_TestFunc.Sync(function() {
						utest_Assert.equals("",scanner.scanUntil(new EReg("a","")),null,{ fileName : "ScannerTest.hx", lineNumber : 59, className : "ScannerTest", methodName : "new"});
						utest_Assert.equals(0,scanner.pos,null,{ fileName : "ScannerTest.hx", lineNumber : 60, className : "ScannerTest", methodName : "new"});
					}));
				}));
				_gthis.describe("when the RegExp matches at some index other than 0",buddy_TestFunc.Sync(function() {
					_gthis.it("returns the string up to that index",buddy_TestFunc.Sync(function() {
						utest_Assert.equals("a ",scanner.scanUntil(new EReg("b","")),null,{ fileName : "ScannerTest.hx", lineNumber : 67, className : "ScannerTest", methodName : "new"});
						utest_Assert.equals(2,scanner.pos,null,{ fileName : "ScannerTest.hx", lineNumber : 68, className : "ScannerTest", methodName : "new"});
					}));
				}));
				_gthis.describe("when the RegExp does not match",buddy_TestFunc.Sync(function() {
					_gthis.it("returns the entire string",buddy_TestFunc.Sync(function() {
						utest_Assert.equals(scanner.string,scanner.scanUntil(new EReg("z","")),null,{ fileName : "ScannerTest.hx", lineNumber : 75, className : "ScannerTest", methodName : "new"});
						utest_Assert.isTrue(scanner.tail == "",null,{ fileName : "ScannerTest.hx", lineNumber : 76, className : "ScannerTest", methodName : "new"});
					}));
				}));
			}));
		}));
	}));
};
ScannerTest.__name__ = ["ScannerTest"];
ScannerTest.__super__ = buddy_BuddySuite;
ScannerTest.prototype = $extend(buddy_BuddySuite.prototype,{
	__class__: ScannerTest
});
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s = c + s;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var buddy_Buddy = function() { };
buddy_Buddy.__name__ = ["buddy","Buddy"];
var TestMain = function() { };
TestMain.__name__ = ["TestMain"];
TestMain.__interfaces__ = [buddy_Buddy];
TestMain.main = function() {
	var testsDone = false;
	var runner = null;
	var error = function() {
		haxe_Log.trace(runner.unrecoverableError,{ fileName : "GenerateMain.hx", lineNumber : 182, className : "TestMain", methodName : "main"});
		var stack = runner.unrecoverableErrorStack;
		if(stack == null || stack.length == 0) {
			return;
		}
		var _g = 0;
		while(_g < stack.length) {
			var s = stack[_g];
			++_g;
			if(s[1] == 2) {
				var line = s[4];
				var file = s[3];
				if(line > 0) {
					haxe_Log.trace(file + ":" + line,{ fileName : "GenerateMain.hx", lineNumber : 188, className : "TestMain", methodName : "main"});
				}
			}
		}
	};
	var startRun = function(done) {
		runner = new buddy_SuitesRunner([new ScannerTest(),new ContextTest(),new ParseTest(),new TestSpec()],new buddy_reporting_ConsoleReporter());
		runner.run().then(function(_) {
			if(runner.unrecoverableError != null) {
				error();
			}
			done();
		});
	};
	process.on('uncaughtException', function(err) {
	runner.haveUnrecoverableError(err);
	});
	startRun(function() {
		process.exit(runner.statusCode());
	});
};
var js_node_Fs = require("fs");
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,__class__: haxe_io_Path
};
var TestSpec = function() {
	this.skipTests = { comments : ["Standalone Without Newline"], delimiters : ["Standalone Without Newline"], inverted : ["Standalone Without Newline"], partials : ["Standalone Without Previous Line","Standalone Without Newline","Standalone Indentation"], sections : ["Standalone Without Newline"]};
	var _gthis = this;
	buddy_BuddySuite.call(this);
	this.describe("Mustache spec compliance",buddy_TestFunc.Sync(function() {
		_gthis.beforeEach(buddy_TestFunc.Sync(function() {
			Mustache.defaultWriter.cache = new haxe_ds_StringMap();
		}));
		var _g = 0;
		var _g1 = TestSpec.specFiles;
		while(_g < _g1.length) {
			var specArea = [_g1[_g]];
			++_g;
			_gthis.describe("- " + specArea[0] + ":",buddy_TestFunc.Sync((function(specArea1) {
				return function() {
					var _g2 = 0;
					var _g3 = JSON.parse(js_node_Fs.readFileSync("spec/specs" + "/" + specArea1[0] + ".json",{ encoding : "utf8"})).tests;
					while(_g2 < _g3.length) {
						var test = [_g3[_g2]];
						++_g2;
						var desc = test[0].name + " - " + test[0].desc;
						if(Object.prototype.hasOwnProperty.call(_gthis.skipTests,specArea1[0]) && _gthis.skipTests[specArea1[0]].indexOf(test[0].name) != -1) {
							_gthis.xit(desc,null);
						} else {
							_gthis.it(desc,buddy_TestFunc.Sync((function(test1) {
								return function() {
									var template = test1[0].template;
									var context = new mustache__$Context_ContextImpl(test1[0].data,null);
									var obj = test1[0].partials;
									var partials = (function() {
										return function(name) {
											return Reflect.field(obj,name);
										};
									})();
									var _this = Mustache.defaultWriter;
									utest_Assert.equals(test1[0].expected,_this.renderTokens(_this.parse(template),context,partials,template),null,{ fileName : "TestSpec.hx", lineNumber : 69, className : "TestSpec", methodName : "new"});
								};
							})(test)));
						}
					}
				};
			})(specArea)));
		}
	}));
};
TestSpec.__name__ = ["TestSpec"];
TestSpec.getSpecs = function(specArea) {
	return JSON.parse(js_node_Fs.readFileSync("spec/specs" + "/" + specArea + ".json",{ encoding : "utf8"}));
};
TestSpec.__super__ = buddy_BuddySuite;
TestSpec.prototype = $extend(buddy_BuddySuite.prototype,{
	skipTests: null
	,__class__: TestSpec
});
var ValueType = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
Type.__name__ = ["Type"];
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return o.__enum__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var buddy_SpecStatus = { __ename__ : ["buddy","SpecStatus"], __constructs__ : ["Unknown","Passed","Pending","Failed"] };
buddy_SpecStatus.Unknown = ["Unknown",0];
buddy_SpecStatus.Unknown.toString = $estr;
buddy_SpecStatus.Unknown.__enum__ = buddy_SpecStatus;
buddy_SpecStatus.Passed = ["Passed",1];
buddy_SpecStatus.Passed.toString = $estr;
buddy_SpecStatus.Passed.__enum__ = buddy_SpecStatus;
buddy_SpecStatus.Pending = ["Pending",2];
buddy_SpecStatus.Pending.toString = $estr;
buddy_SpecStatus.Pending.__enum__ = buddy_SpecStatus;
buddy_SpecStatus.Failed = ["Failed",3];
buddy_SpecStatus.Failed.toString = $estr;
buddy_SpecStatus.Failed.__enum__ = buddy_SpecStatus;
var buddy_Step = { __ename__ : ["buddy","Step"], __constructs__ : ["TSuite","TSpec"] };
buddy_Step.TSuite = function(s) { var $x = ["TSuite",0,s]; $x.__enum__ = buddy_Step; $x.toString = $estr; return $x; };
buddy_Step.TSpec = function(s) { var $x = ["TSpec",1,s]; $x.__enum__ = buddy_Step; $x.toString = $estr; return $x; };
var buddy_Suite = function(description) {
	this.stack = [];
	this.steps = [];
	if(description == null) {
		throw new js__$Boot_HaxeError("Suite requires a description.");
	}
	this.description = description;
};
buddy_Suite.__name__ = ["buddy","Suite"];
buddy_Suite.prototype = {
	description: null
	,steps: null
	,error: null
	,stack: null
	,get_specs: function() {
		var output = [];
		var _g = 0;
		var _g1 = this.steps;
		while(_g < _g1.length) {
			var step = _g1[_g];
			++_g;
			if(step[1] == 1) {
				output.push(step[2]);
			}
		}
		return output;
	}
	,get_suites: function() {
		var output = [];
		var _g = 0;
		var _g1 = this.steps;
		while(_g < _g1.length) {
			var step = _g1[_g];
			++_g;
			if(step[1] == 0) {
				output.push(step[2]);
			}
		}
		return output;
	}
	,passed: function() {
		if(Lambda.exists(this.get_specs(),function(spec) {
			return spec.status == buddy_SpecStatus.Failed;
		})) {
			return false;
		}
		return !Lambda.exists(this.get_suites(),function(suite) {
			return !suite.passed();
		});
	}
	,__class__: buddy_Suite
	,__properties__: {get_suites:"get_suites",get_specs:"get_specs"}
};
var buddy_Spec = function(description) {
	this.traces = [];
	this.stack = [];
	this.status = buddy_SpecStatus.Unknown;
	if(description == null) {
		throw new js__$Boot_HaxeError("Spec must have a description.");
	}
	this.description = description;
};
buddy_Spec.__name__ = ["buddy","Spec"];
buddy_Spec.prototype = {
	description: null
	,status: null
	,error: null
	,stack: null
	,traces: null
	,__class__: buddy_Spec
};
var buddy_TestFunc = { __ename__ : ["buddy","TestFunc"], __constructs__ : ["Async","Sync"] };
buddy_TestFunc.Async = function(f) { var $x = ["Async",0,f]; $x.__enum__ = buddy_TestFunc; $x.toString = $estr; return $x; };
buddy_TestFunc.Sync = function(f) { var $x = ["Sync",1,f]; $x.__enum__ = buddy_TestFunc; $x.toString = $estr; return $x; };
var buddy_TestSpec = { __ename__ : ["buddy","TestSpec"], __constructs__ : ["Describe","It"] };
buddy_TestSpec.Describe = function(suite,included) { var $x = ["Describe",0,suite,included]; $x.__enum__ = buddy_TestSpec; $x.toString = $estr; return $x; };
buddy_TestSpec.It = function(description,test,included) { var $x = ["It",1,description,test,included]; $x.__enum__ = buddy_TestSpec; $x.toString = $estr; return $x; };
var buddy_TestSuite = function(description) {
	this.afterAll = new List();
	this.afterEach = new List();
	this.specs = new List();
	this.beforeEach = new List();
	this.beforeAll = new List();
	if(description == null) {
		throw new js__$Boot_HaxeError("TestSuite must have a description. Can be empty.");
	}
	this.description = description;
};
buddy_TestSuite.__name__ = ["buddy","TestSuite"];
buddy_TestSuite.prototype = {
	description: null
	,beforeAll: null
	,beforeEach: null
	,specs: null
	,afterEach: null
	,afterAll: null
	,__class__: buddy_TestSuite
};
var buddy_Should = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	this.value = value;
	this.inverse = inverse;
};
buddy_Should.__name__ = ["buddy","Should"];
buddy_Should.prototype = {
	value: null
	,inverse: null
	,be: function(expected,p) {
		this.test(this.value == expected,p,"Expected " + this.quote(expected) + ", was " + this.quote(this.value),"Didn't expect " + this.quote(expected) + " but was equal to that");
	}
	,beType: function(type,p) {
		this.test(js_Boot.__instanceof(this.value,type),p,"Expected " + this.quote(this.value) + " to be type " + this.quote(type),"Expected " + this.quote(this.value) + " not to be type " + this.quote(type));
	}
	,quote: function(v) {
		if(typeof(v) == "string") {
			return "\"" + Std.string(v) + "\"";
		} else {
			return Std.string(v);
		}
	}
	,test: function(expr,p,error,errorInverted) {
		if(buddy_SuitesRunner.currentTest == null) {
			throw new js__$Boot_HaxeError("SuitesRunner.currentTest was null");
		}
		if(!this.inverse) {
			buddy_SuitesRunner.currentTest(expr,error,buddy_SuitesRunner.posInfosToStack(p));
		} else {
			buddy_SuitesRunner.currentTest(!expr,errorInverted,buddy_SuitesRunner.posInfosToStack(p));
		}
	}
	,__class__: buddy_Should
};
var buddy_ShouldDynamic = function(value,inverse) {
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldDynamic.__name__ = ["buddy","ShouldDynamic"];
buddy_ShouldDynamic.should = function(d) {
	return new buddy_ShouldDynamic(d);
};
buddy_ShouldDynamic.__super__ = buddy_Should;
buddy_ShouldDynamic.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldDynamic(this.value,!this.inverse);
	}
	,__class__: buddy_ShouldDynamic
	,__properties__: {get_not:"get_not"}
});
var buddy_ShouldInt = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldInt.__name__ = ["buddy","ShouldInt"];
buddy_ShouldInt.should = function(i) {
	return new buddy_ShouldInt(i);
};
buddy_ShouldInt.__super__ = buddy_Should;
buddy_ShouldInt.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldInt(this.value,!this.inverse);
	}
	,beLessThan: function(expected,p) {
		this.test(this.value < expected,p,"Expected less than " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not less than " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beGreaterThan: function(expected,p) {
		this.test(this.value > expected,p,"Expected greater than " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not greater than " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,__class__: buddy_ShouldInt
	,__properties__: {get_not:"get_not"}
});
var buddy_ShouldFloat = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldFloat.__name__ = ["buddy","ShouldFloat"];
buddy_ShouldFloat.should = function(i) {
	return new buddy_ShouldFloat(i);
};
buddy_ShouldFloat.__super__ = buddy_Should;
buddy_ShouldFloat.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldFloat(this.value,!this.inverse);
	}
	,beLessThan: function(expected,p) {
		this.test(this.value < expected,p,"Expected less than " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not less than " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beGreaterThan: function(expected,p) {
		this.test(this.value > expected,p,"Expected greater than " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not greater than " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beCloseTo: function(expected,precision,p) {
		if(precision == null) {
			precision = 2;
		}
		this.test(Math.abs(expected - this.value) < Math.pow(10,-precision) / 2,p,"Expected close to " + this.quote(expected) + ", was " + this.quote(this.value),"Expected " + this.quote(this.value) + " not to be close to " + this.quote(expected));
	}
	,__class__: buddy_ShouldFloat
	,__properties__: {get_not:"get_not"}
});
var buddy_ShouldDate = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldDate.__name__ = ["buddy","ShouldDate"];
buddy_ShouldDate.should = function(i) {
	return new buddy_ShouldDate(i);
};
buddy_ShouldDate.__super__ = buddy_Should;
buddy_ShouldDate.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldDate(this.value,!this.inverse);
	}
	,beOn: function(expected,p) {
		this.test(this.value.getTime() == expected.getTime(),p,"Expected date equal to " + this.quote(expected) + ", was " + this.quote(this.value),"Expected date not equal to " + this.quote(expected));
	}
	,beBefore: function(expected,p) {
		this.test(this.value.getTime() < expected.getTime(),p,"Expected date before " + this.quote(expected) + ", was " + this.quote(this.value),"Expected date not before " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beAfter: function(expected,p) {
		this.test(this.value.getTime() > expected.getTime(),p,"Expected date after " + this.quote(expected) + ", was " + this.quote(this.value),"Expected date not after " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beOnStr: function(expected,p) {
		this.beOn(HxOverrides.strDate(expected),p);
		return;
	}
	,beBeforeStr: function(expected,p) {
		this.beBefore(HxOverrides.strDate(expected),p);
		return;
	}
	,beAfterStr: function(expected,p) {
		this.beAfter(HxOverrides.strDate(expected),p);
		return;
	}
	,__class__: buddy_ShouldDate
	,__properties__: {get_not:"get_not"}
});
var buddy_ShouldString = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldString.__name__ = ["buddy","ShouldString"];
buddy_ShouldString.should = function(str) {
	return new buddy_ShouldString(str);
};
buddy_ShouldString.__super__ = buddy_Should;
buddy_ShouldString.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldString(this.value,!this.inverse);
	}
	,contain: function(substring,p) {
		this.test(this.value.indexOf(substring) >= 0,p,"Expected " + this.quote(this.value) + " to contain " + this.quote(substring),"Expected " + this.quote(this.value) + " not to contain " + this.quote(substring));
	}
	,startWith: function(substring,p) {
		this.test(StringTools.startsWith(this.value,substring),p,"Expected " + this.quote(this.value) + " to start with " + this.quote(substring),"Expected " + this.quote(this.value) + " not to start with " + this.quote(substring));
	}
	,endWith: function(substring,p) {
		this.test(StringTools.endsWith(this.value,substring),p,"Expected " + this.quote(this.value) + " to end with " + this.quote(substring),"Expected " + this.quote(this.value) + " not to end with " + this.quote(substring));
	}
	,match: function(regexp,p) {
		this.test(regexp.match(this.value),p,"Expected " + this.quote(this.value) + " to match regular expression","Expected " + this.quote(this.value) + " not to match regular expression");
	}
	,__class__: buddy_ShouldString
	,__properties__: {get_not:"get_not"}
});
var buddy_ShouldIterable = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldIterable.__name__ = ["buddy","ShouldIterable"];
buddy_ShouldIterable.should = function(value) {
	return new buddy_ShouldIterable(value);
};
buddy_ShouldIterable.__super__ = buddy_Should;
buddy_ShouldIterable.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldIterable(this.value,!this.inverse);
	}
	,contain: function(o,p) {
		this.test(Lambda.exists(this.value,function(el) {
			return el == o;
		}),p,"Expected " + this.quote(this.value) + " to contain " + this.quote(o),"Expected " + this.quote(this.value) + " not to contain " + this.quote(o));
	}
	,containAll: function(values,p) {
		var expr = true;
		var tmp = $iterator(values)();
		while(tmp.hasNext()) if(!Lambda.exists(this.value,(function(a) {
			return function(v) {
				return v == a[0];
			};
		})([tmp.next()]))) {
			expr = false;
			break;
		}
		this.test(expr,p,"Expected " + this.quote(this.value) + " to contain all of " + this.quote(values),"Expected " + this.quote(this.value) + " not to contain all of " + this.quote(values));
	}
	,containExactly: function(values,p) {
		var a = $iterator(this.value)();
		var b = $iterator(values)();
		var expr = true;
		while(a.hasNext() || b.hasNext()) if(a.next() != b.next()) {
			expr = false;
			break;
		}
		this.test(expr,p,"Expected " + this.quote(this.value) + " to contain exactly " + this.quote(values),"Expected " + this.quote(this.value) + " not to contain exactly " + this.quote(values));
	}
	,__class__: buddy_ShouldIterable
	,__properties__: {get_not:"get_not"}
});
var buddy_ShouldFunctions = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	this.value = value;
	this.inverse = inverse;
};
buddy_ShouldFunctions.__name__ = ["buddy","ShouldFunctions"];
buddy_ShouldFunctions.should = function(value) {
	return new buddy_ShouldFunctions(value);
};
buddy_ShouldFunctions.prototype = {
	value: null
	,inverse: null
	,get_not: function() {
		return new buddy_ShouldFunctions(this.value,!this.inverse);
	}
	,throwAnything: function(p) {
		var caught = false;
		var exception = null;
		try {
			this.value();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			exception = e;
			caught = true;
		}
		this.test(caught,p,"Expected " + this.quote(this.value) + " to throw anything, nothing was thrown","Expected " + this.quote(this.value) + " not to throw anything, " + this.quote(exception) + " was thrown");
		return exception;
	}
	,throwValue: function(v,p) {
		var caught = false;
		var exception = null;
		try {
			this.value();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			exception = e;
			caught = e == v;
		}
		this.test(caught,p,"Expected " + this.quote(this.value) + " to throw " + this.quote(v),"Expected " + this.quote(this.value) + " not to throw " + this.quote(v));
		return exception;
	}
	,throwType: function(type,p) {
		var caught = false;
		var name = Type.getClassName(type);
		var exceptionName = null;
		var exception = null;
		try {
			this.value();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			exception = e;
			exceptionName = Type.getClassName(e == null?null:js_Boot.getClass(e));
			caught = js_Boot.__instanceof(e,type);
		}
		if(exceptionName == null) {
			exceptionName = "no exception";
		}
		this.test(caught,p,"Expected " + this.quote(this.value) + " to throw type " + name + ", " + exceptionName + " was thrown instead","Expected " + this.quote(this.value) + " not to throw type " + name);
		return exception;
	}
	,be: function(expected,p) {
		this.test(this.value == expected,p,"Expected " + this.quote(expected) + ", was " + this.quote(this.value),"Didn't expect " + this.quote(expected) + " but was equal to that");
	}
	,quote: function(v) {
		if(typeof(v) == "string") {
			return "\"" + Std.string(v) + "\"";
		} else {
			return Std.string(v);
		}
	}
	,test: function(expr,p,error,errorInverted) {
		if(buddy_SuitesRunner.currentTest == null) {
			throw new js__$Boot_HaxeError("SuitesRunner.currentTest was null");
		}
		if(!this.inverse) {
			buddy_SuitesRunner.currentTest(expr,error,buddy_SuitesRunner.posInfosToStack(p));
		} else {
			buddy_SuitesRunner.currentTest(!expr,errorInverted,buddy_SuitesRunner.posInfosToStack(p));
		}
	}
	,__class__: buddy_ShouldFunctions
	,__properties__: {get_not:"get_not"}
};
var buddy_SuitesRunner = function(buddySuites,reporter) {
	this.allTestsPassed = false;
	this.unrecoverableErrorStack = null;
	this.unrecoverableError = null;
	this.buddySuites = buddySuites;
	this.reporter = reporter == null?new buddy_reporting_ConsoleReporter():reporter;
	this.oldLog = haxe_Log.trace;
};
buddy_SuitesRunner.__name__ = ["buddy","SuitesRunner"];
buddy_SuitesRunner.posInfosToStack = function(p) {
	if(p == null) {
		return [haxe_StackItem.FilePos(null,"",0)];
	} else {
		return [haxe_StackItem.FilePos(null,p.fileName,p.lineNumber)];
	}
};
buddy_SuitesRunner.prototype = {
	unrecoverableError: null
	,unrecoverableErrorStack: null
	,allTestsPassed: null
	,buddySuites: null
	,reporter: null
	,runCompleted: null
	,oldLog: null
	,run: function() {
		var _gthis = this;
		this.runCompleted = new promhx_Deferred();
		var runCompletedPromise = this.runCompleted.promise();
		this.runDescribes(function(err) {
			if(err != null) {
				_gthis.haveUnrecoverableError(err);
			} else {
				_gthis.startRun();
			}
		});
		return runCompletedPromise;
	}
	,runDescribes: function(cb) {
		var _gthis = this;
		this.forEachSeries(this.buddySuites,function(suite,cb1) {
			var queue = suite.describeQueue;
			var processQueue = null;
			processQueue = function() {
				try {
					if(Lambda.empty(queue)) {
						cb1(null);
						return;
					}
					var current = queue.pop();
					suite.currentSuite = current.suite;
					var _g = current.spec;
					switch(_g[1]) {
					case 0:
						_g[2](processQueue);
						break;
					case 1:
						_g[2]();
						processQueue();
						break;
					}
				} catch( e ) {
					haxe_CallStack.lastException = e;
					if (e instanceof js__$Boot_HaxeError) e = e.val;
					cb1(e);
				}
			};
			processQueue();
		},function(err) {
			if(err != null) {
				cb(err);
				return;
			}
			if(Object.prototype.hasOwnProperty.call(haxe_rtti_Meta.getType(buddy_BuddySuite),"includeMode")) {
				_gthis.startIncludeMode();
			}
			cb(null);
		});
	}
	,failed: function() {
		return !this.allTestsPassed;
	}
	,statusCode: function() {
		if(this.failed()) {
			return 1;
		} else {
			return 0;
		}
	}
	,startRun: function() {
		var _gthis = this;
		this.reporter.start().then(function(go) {
			if(!go) {
				_gthis.reporter.done([],false).then(function(_) {
					_gthis.runCompleted.resolve(_gthis);
				});
				return;
			}
			var beforeEachStack = [[]];
			var afterEachStack = [[]];
			_gthis.mapSeries(_gthis.buddySuites,function(buddySuite,done) {
				_gthis.mapTestSuite(buddySuite,buddySuite.suite,beforeEachStack,afterEachStack,function(err,suite) {
					if(err != null) {
						_gthis.suiteError(suite,err);
					}
					done(null,suite);
				});
			},function(err1,suites) {
				if(err1 != null) {
					_gthis.haveUnrecoverableError(err1);
				} else {
					_gthis.allTestsPassed = !Lambda.exists(suites,function(suite1) {
						return !suite1.passed();
					});
					_gthis.reporter.done(suites,_gthis.allTestsPassed).then(function(_1) {
						_gthis.runCompleted.resolve(_gthis);
					});
				}
			});
		});
	}
	,startIncludeMode: function() {
		var traverse = null;
		traverse = function(suite) {
			suite.specs = suite.specs.filter(function(spec) {
				switch(spec[1]) {
				case 0:
					var included = spec[3];
					var suite1 = spec[2];
					if(included) {
						return true;
					} else {
						return traverse(suite1);
					}
					break;
				case 1:
					return spec[4];
				}
			});
			return suite.specs.length > 0;
		};
		var traverse1 = traverse;
		this.buddySuites = Lambda.filter(this.buddySuites,function(buddySuite) {
			var suiteMeta = haxe_rtti_Meta.getType(buddySuite == null?null:js_Boot.getClass(buddySuite));
			if(Object.prototype.hasOwnProperty.call(suiteMeta,"include")) {
				return true;
			}
			return traverse1(buddySuite.suite);
		});
	}
	,suiteError: function(suite,err) {
		suite.error = err;
		suite.stack = haxe_CallStack.exceptionStack();
	}
	,mapTestSuite: function(buddySuite,testSuite,beforeEachStack,afterEachStack,done) {
		var _gthis = this;
		var currentSuite = buddy_tests_SelfTest.lastSuite = new buddy_Suite(testSuite.description);
		beforeEachStack.push(Lambda.array(testSuite.beforeEach));
		afterEachStack.unshift(Lambda.array(testSuite.afterEach));
		this.forEachSeries(testSuite.beforeAll,$bind(this,this.runTestFunc),function(err) {
			if(err != null) {
				done(err,currentSuite);
				return;
			}
			_gthis.mapSeries(testSuite.specs,function(testSpec,cb) {
				_gthis.mapTestSpec(buddySuite,testSuite,beforeEachStack,afterEachStack,testSpec,cb);
			},function(err1,testSteps) {
				if(err1 != null) {
					done(err1,currentSuite);
					return;
				}
				_gthis.forEachSeries(testSuite.afterAll,$bind(_gthis,_gthis.runTestFunc),function(err2) {
					if(err2 != null) {
						done(err2,currentSuite);
						return;
					}
					currentSuite.steps = testSteps;
					beforeEachStack.pop();
					afterEachStack.shift();
					done(null,currentSuite);
				});
			});
		});
	}
	,runTestFunc: function(func,done) {
		try {
			switch(func[1]) {
			case 0:
				func[2](function() {
					done(null);
				});
				break;
			case 1:
				func[2]();
				done(null);
				break;
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			done(e);
		}
	}
	,flatten: function(arr) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < arr.length) {
			var a = arr[_g1];
			++_g1;
			var _g2 = 0;
			while(_g2 < a.length) {
				var b = a[_g2];
				++_g2;
				_g.push(b);
			}
		}
		return _g;
	}
	,mapTestSpec: function(buddySuite,testSuite,beforeEachStack,afterEachStack,testSpec,done) {
		var _gthis = this;
		var oldFail = buddySuite.fail = function(err,p) {
			if(err == null) {
				err = "Exception";
			}
			done(err,null);
		};
		var oldPending = buddySuite.pending = function(message,p1) {
			done("Cannot call pending here.",null);
		};
		switch(testSpec[1]) {
		case 0:
			this.mapTestSuite(buddySuite,testSpec[2],beforeEachStack,afterEachStack,function(err1,newSuite) {
				if(err1 != null) {
					done(err1,null);
				} else {
					done(null,buddy_Step.TSuite(newSuite));
				}
			});
			break;
		case 1:
			var test = testSpec[3];
			var spec = buddy_tests_SelfTest.lastSpec = new buddy_Spec(testSpec[2]);
			var hasCompleted = false;
			haxe_Log.trace = function(v,pos) {
				if(pos == null) {
					spec.traces.push(v == null?"null":"" + v);
				} else {
					spec.traces.push(pos.fileName + ":" + pos.lineNumber + ": " + v);
				}
			};
			var specCompleted = function(status,error,stack) {
				if(hasCompleted) {
					return;
				}
				hasCompleted = true;
				spec.status = status;
				spec.error = error;
				spec.stack = stack;
				haxe_Log.trace = _gthis.oldLog;
				buddySuite.fail = oldFail;
				buddySuite.pending = oldPending;
				_gthis.forEachSeries(_gthis.flatten(afterEachStack),$bind(_gthis,_gthis.runTestFunc),function(err2) {
					if(err2 != null) {
						done(err2,null);
					} else {
						_gthis.reporter.progress(spec).then(function(_) {
							done(null,buddy_Step.TSpec(spec));
						});
					}
				});
			};
			if(test == null) {
				specCompleted(buddy_SpecStatus.Pending,null,null);
				return;
			}
			buddy_SuitesRunner.currentTest = function(testStatus,error1,stack1) {
				if(hasCompleted || testStatus == true) {
					return;
				}
				specCompleted(buddy_SpecStatus.Failed,error1,stack1);
			};
			utest_Assert.results = new List();
			var checkUtestResults = function() {
				var _g_head = utest_Assert.results.h;
				try {
					while(_g_head != null) {
						var val = _g_head.item;
						_g_head = _g_head.next;
						switch(val[1]) {
						case 0:
							break;
						case 1:
							specCompleted(buddy_SpecStatus.Failed,val[2],buddy_SuitesRunner.posInfosToStack(val[3]));
							throw "__break__";
							break;
						case 2:
							specCompleted(buddy_SpecStatus.Failed,val[2],val[3]);
							throw "__break__";
							break;
						case 3:
							specCompleted(buddy_SpecStatus.Failed,val[2],val[3]);
							throw "__break__";
							break;
						case 4:
							specCompleted(buddy_SpecStatus.Failed,val[2],val[3]);
							throw "__break__";
							break;
						case 5:
							specCompleted(buddy_SpecStatus.Failed,val[2],val[3]);
							throw "__break__";
							break;
						case 6:
							specCompleted(buddy_SpecStatus.Failed,val[2],val[3]);
							throw "__break__";
							break;
						case 7:
							break;
						}
					}
				} catch( e ) { if( e != "__break__" ) throw e; }
			};
			var timeout = buddySuite.timeoutMs;
			if(timeout > 0) {
				buddy_tools_AsyncTools.wait(timeout).catchError(function(e) {
					specCompleted(buddy_SpecStatus.Failed,e,haxe_CallStack.exceptionStack());
				}).then(function(_1) {
					specCompleted(buddy_SpecStatus.Failed,"Timeout after " + timeout + " ms",null);
				});
			}
			buddySuite.fail = function(err3,p2) {
				if(err3 == null) {
					err3 = "Manually";
				}
				specCompleted(buddy_SpecStatus.Failed,err3,buddy_SuitesRunner.posInfosToStack(p2));
			};
			buddySuite.pending = function(message1,p3) {
				specCompleted(buddy_SpecStatus.Pending,null,buddy_SuitesRunner.posInfosToStack(p3));
			};
			this.forEachSeries(this.flatten(beforeEachStack),$bind(this,this.runTestFunc),function(err4) {
				if(err4 != null) {
					done(err4,null);
					return;
				}
				_gthis.runTestFunc(test,function(err5) {
					checkUtestResults();
					if(err5 != null) {
						specCompleted(buddy_SpecStatus.Failed,err5,haxe_CallStack.exceptionStack());
					} else {
						specCompleted(buddy_SpecStatus.Passed,null,null);
					}
				});
			});
			break;
		}
	}
	,haveUnrecoverableError: function(err) {
		this.unrecoverableError = err;
		this.unrecoverableErrorStack = haxe_CallStack.exceptionStack();
		this.runCompleted.resolve(this);
	}
	,mapSeries: function(iterable,cb,done) {
		var iterator = $iterator(iterable)();
		var output = [];
		var next = null;
		next = function() {
			if(!iterator.hasNext()) {
				done(null,output);
			} else {
				cb(iterator.next(),function(err,mapped) {
					if(err == null) {
						output.push(mapped);
						next();
					} else {
						done(err,output);
					}
				});
			}
		};
		next();
	}
	,forEachSeries: function(iterable,cb,done) {
		var iterator = $iterator(iterable)();
		var next = null;
		next = function() {
			if(!iterator.hasNext()) {
				done(null);
			} else {
				cb(iterator.next(),function(err) {
					if(err == null) {
						next();
					} else {
						done(err);
					}
				});
			}
		};
		next();
	}
	,__class__: buddy_SuitesRunner
};
var buddy_internal_GenerateMain = function() { };
buddy_internal_GenerateMain.__name__ = ["buddy","internal","GenerateMain"];
var buddy_internal_sys_NodeJs = function() { };
buddy_internal_sys_NodeJs.__name__ = ["buddy","internal","sys","NodeJs"];
buddy_internal_sys_NodeJs.print = function(s) {
	process.stdout.write(s);
};
buddy_internal_sys_NodeJs.println = function(s) {
	console.log(s);
};
var buddy_reporting_Reporter = function() { };
buddy_reporting_Reporter.__name__ = ["buddy","reporting","Reporter"];
buddy_reporting_Reporter.prototype = {
	start: null
	,progress: null
	,done: null
	,__class__: buddy_reporting_Reporter
};
var buddy_reporting_TraceReporter = function() {
};
buddy_reporting_TraceReporter.__name__ = ["buddy","reporting","TraceReporter"];
buddy_reporting_TraceReporter.__interfaces__ = [buddy_reporting_Reporter];
buddy_reporting_TraceReporter.prototype = {
	start: function() {
		return this.resolveImmediately(true);
	}
	,progress: function(spec) {
		return this.resolveImmediately(spec);
	}
	,done: function(suites,status) {
		var _gthis = this;
		this.println("");
		var total = 0;
		var failures = 0;
		var pending = 0;
		var countTests = null;
		var printTests = null;
		countTests = function(s) {
			if(s.error != null) {
				++failures;
			}
			var _g = 0;
			var _g1 = s.steps;
			while(_g < _g1.length) {
				var sp = _g1[_g];
				++_g;
				switch(sp[1]) {
				case 0:
					countTests(sp[2]);
					break;
				case 1:
					var sp1 = sp[2];
					++total;
					if(sp1.status == buddy_SpecStatus.Failed) {
						++failures;
					} else if(sp1.status == buddy_SpecStatus.Pending) {
						++pending;
					}
					break;
				}
			}
		};
		Lambda.iter(suites,countTests);
		printTests = function(s1,indentLevel) {
			var print = function(str) {
				_gthis.println(StringTools.lpad(str," ",str.length + (Math.max(0,indentLevel * 2) | 0)));
			};
			var printStack = function(stack) {
				if(stack == null || stack.length == 0) {
					return;
				}
				var _g2 = 0;
				while(_g2 < stack.length) {
					var s2 = stack[_g2];
					++_g2;
					if(s2[1] == 2) {
						var line = s2[4];
						var file = s2[3];
						if(line > 0 && file.indexOf("buddy/internal/") != 0) {
							print("    @ " + file + ":" + line);
						}
					}
				}
			};
			var printTraces = function(spec) {
				var _g3 = 0;
				var _g11 = spec.traces;
				while(_g3 < _g11.length) {
					var t = _g11[_g3];
					++_g3;
					print("    " + t);
				}
			};
			if(s1.description.length > 0) {
				print(s1.description);
			}
			if(s1.error != null) {
				print("ERROR: " + Std.string(s1.error));
				printStack(s1.stack);
				return;
			}
			var _g4 = 0;
			var _g12 = s1.steps;
			while(_g4 < _g12.length) {
				var step = _g12[_g4];
				++_g4;
				switch(step[1]) {
				case 0:
					printTests(step[2],indentLevel + 1);
					break;
				case 1:
					var sp2 = step[2];
					if(sp2.status == buddy_SpecStatus.Failed) {
						print("  " + sp2.description + " (FAILED: " + Std.string(sp2.error) + ")");
					} else {
						print("  " + sp2.description + " (" + Std.string(sp2.status) + ")");
					}
					printTraces(sp2);
					printStack(sp2.stack);
					break;
				}
			}
		};
		var f = printTests;
		Lambda.iter(suites,function(a1) {
			f(a1,-1);
		});
		this.println("" + total + " specs, " + failures + " failures, " + pending + " pending");
		return this.resolveImmediately(suites);
	}
	,print: function(s) {
	}
	,println: function(s) {
		haxe_Log.trace(s,{ fileName : "TraceReporter.hx", lineNumber : 105, className : "buddy.reporting.TraceReporter", methodName : "println"});
	}
	,resolveImmediately: function(o) {
		var def = new promhx_Deferred();
		var pr = def.promise();
		def.resolve(o);
		return pr;
	}
	,__class__: buddy_reporting_TraceReporter
};
var buddy_reporting_ConsoleReporter = function() {
	buddy_reporting_TraceReporter.call(this);
};
buddy_reporting_ConsoleReporter.__name__ = ["buddy","reporting","ConsoleReporter"];
buddy_reporting_ConsoleReporter.__super__ = buddy_reporting_TraceReporter;
buddy_reporting_ConsoleReporter.prototype = $extend(buddy_reporting_TraceReporter.prototype,{
	start: function() {
		return this.resolveImmediately(true);
	}
	,progress: function(spec) {
		var _g = spec.status;
		var tmp;
		switch(_g[1]) {
		case 0:
			tmp = "?";
			break;
		case 1:
			tmp = ".";
			break;
		case 2:
			tmp = "P";
			break;
		case 3:
			tmp = "X";
			break;
		}
		this.print(tmp);
		return this.resolveImmediately(spec);
	}
	,done: function(suites,status) {
		return buddy_reporting_TraceReporter.prototype.done.call(this,suites,status);
	}
	,print: function(s) {
		buddy_internal_sys_NodeJs.print(s);
	}
	,println: function(s) {
		buddy_internal_sys_NodeJs.println(s);
	}
	,__class__: buddy_reporting_ConsoleReporter
});
var buddy_tests_SelfTest = function() { };
buddy_tests_SelfTest.__name__ = ["buddy","tests","SelfTest"];
buddy_tests_SelfTest.passLastSpecIf = function(expr,failReason) {
	if(expr) {
		buddy_tests_SelfTest.setLastSpec(buddy_SpecStatus.Passed);
		failReason = null;
	} else {
		buddy_tests_SelfTest.setLastSpec(buddy_SpecStatus.Failed);
	}
	var o = buddy_tests_SelfTest.lastSpec;
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + "error"];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](failReason);
	} else {
		o.error = failReason;
	}
};
buddy_tests_SelfTest.setLastSpec = function(status) {
	var o = buddy_tests_SelfTest.lastSpec;
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + "status"];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](status);
	} else {
		o.status = status;
	}
};
var buddy_tools_AsyncTools = function() { };
buddy_tools_AsyncTools.__name__ = ["buddy","tools","AsyncTools"];
buddy_tools_AsyncTools.iterateAsyncBool = function(it,action) {
	return buddy_tools_AsyncTools.iterateAsync(it,action,true);
};
buddy_tools_AsyncTools.iterateAsync = function(it,action,resolveWith) {
	var finished = new promhx_Deferred();
	var pr = finished.promise();
	buddy_tools_AsyncTools.next($iterator(it)(),action,finished,resolveWith);
	return pr;
};
buddy_tools_AsyncTools.wait = function(ms) {
	var def = new promhx_Deferred();
	var pr = def.promise();
	var done = function() {
		if(!pr._fulfilled) {
			def.resolve(true);
		}
	};
	haxe_Timer.delay(function() {
		done();
	},ms);
	return pr;
};
buddy_tools_AsyncTools.next = function(it,action,def,resolveWith) {
	if(!it.hasNext()) {
		def.resolve(resolveWith);
	} else {
		action(it.next()).then(function(_) {
			buddy_tools_AsyncTools.next(it,action,def,resolveWith);
		});
	}
};
var haxe_StackItem = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		b.b += m == null?"null":"" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null?"null":"" + file;
		b.b += " line ";
		b.b += line == null?"null":"" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b += cname == null?"null":"" + cname;
		b.b += ".";
		b.b += meth == null?"null":"" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		b.b += n == null?"null":"" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function"?haxe_StackItem.LocalFunction():meth == "Global code"?null:haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	get: null
	,keys: null
	,__class__: haxe_IMap
};
var haxe_Log = function() { };
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds_Option = { __ename__ : ["haxe","ds","Option"], __constructs__ : ["Some","None"] };
haxe_ds_Option.Some = function(v) { var $x = ["Some",0,v]; $x.__enum__ = haxe_ds_Option; $x.toString = $estr; return $x; };
haxe_ds_Option.None = ["None",1];
haxe_ds_Option.None.toString = $estr;
haxe_ds_Option.None.__enum__ = haxe_ds_Option;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,__class__: haxe_io_Bytes
};
var haxe_rtti_Meta = function() { };
haxe_rtti_Meta.__name__ = ["haxe","rtti","Meta"];
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null?i.fileName + ":" + i.lineNumber + ": ":"";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class && o.__name__ != null) {
			return true;
		}
		if(cl == Enum && o.__ename__ != null) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_buffer_Buffer = require("buffer").Buffer;
var mustache__$Context_ContextImpl = function(view,parentContext) {
	this.view = view;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["."] != null) {
		_g.setReserved(".",view);
	} else {
		_g.h["."] = view;
	}
	this.cache = _g;
	this.parent = parentContext;
};
mustache__$Context_ContextImpl.__name__ = ["mustache","_Context","ContextImpl"];
mustache__$Context_ContextImpl.prototype = {
	view: null
	,parent: null
	,cache: null
	,push: function(view) {
		return new mustache__$Context_ContextImpl(view,this);
	}
	,lookup: function(name) {
		var value = null;
		var _this = this.cache;
		if(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name)) {
			var _this1 = this.cache;
			value = __map_reserved[name] != null?_this1.getReserved(name):_this1.h[name];
		} else {
			var context = this;
			var lookupHit = false;
			while(context != null) {
				if(name.indexOf(".") > 0) {
					value = context.view;
					var names = name.split(".");
					var index = 0;
					while(value != null && index < names.length) {
						if(index == names.length - 1) {
							lookupHit = Object.prototype.hasOwnProperty.call(value,names[index]);
						}
						value = Reflect.field(value,names[index++]);
					}
				} else {
					value = Reflect.field(context.view,name);
					lookupHit = Object.prototype.hasOwnProperty.call(context.view,name);
				}
				if(lookupHit) {
					break;
				}
				context = context.parent;
			}
			var v = value;
			var _this2 = this.cache;
			if(__map_reserved[name] != null) {
				_this2.setReserved(name,v);
			} else {
				_this2.h[name] = v;
			}
		}
		if(Reflect.isFunction(value)) {
			value = value(this.view);
		}
		return value;
	}
	,__class__: mustache__$Context_ContextImpl
};
var mustache__$Partials_Partials_$Impl_$ = {};
mustache__$Partials_Partials_$Impl_$.__name__ = ["mustache","_Partials","Partials_Impl_"];
mustache__$Partials_Partials_$Impl_$.fromDynamic = function(obj) {
	return function(name) {
		return Reflect.field(obj,name);
	};
};
var mustache_Scanner = function(string) {
	this.string = string;
	this.tail = string;
	this.pos = 0;
};
mustache_Scanner.__name__ = ["mustache","Scanner"];
mustache_Scanner.prototype = {
	string: null
	,tail: null
	,pos: null
	,eos: function() {
		return this.tail == "";
	}
	,scan: function(re) {
		if(!re.match(this.tail)) {
			return "";
		}
		var p = re.matchedPos();
		if(p.pos != 0) {
			return "";
		}
		this.tail = this.tail.substring(p.len);
		this.pos += p.len;
		return re.matched(0);
	}
	,scanUntil: function(re) {
		var match;
		if(re.match(this.tail)) {
			var p = re.matchedPos();
			if(p.pos == 0) {
				match = "";
			} else {
				match = this.tail.substring(0,p.pos);
				this.tail = this.tail.substring(p.pos);
			}
		} else {
			match = this.tail;
			this.tail = "";
		}
		this.pos += match.length;
		return match;
	}
	,__class__: mustache_Scanner
};
var mustache_TokenType = { __ename__ : ["mustache","TokenType"], __constructs__ : ["Text","Value","Section","SectionClose","Partial","Comment","SetDelimiters"] };
mustache_TokenType.Text = ["Text",0];
mustache_TokenType.Text.toString = $estr;
mustache_TokenType.Text.__enum__ = mustache_TokenType;
mustache_TokenType.Value = function(escaped) { var $x = ["Value",1,escaped]; $x.__enum__ = mustache_TokenType; $x.toString = $estr; return $x; };
mustache_TokenType.Section = function(inverted) { var $x = ["Section",2,inverted]; $x.__enum__ = mustache_TokenType; $x.toString = $estr; return $x; };
mustache_TokenType.SectionClose = ["SectionClose",3];
mustache_TokenType.SectionClose.toString = $estr;
mustache_TokenType.SectionClose.__enum__ = mustache_TokenType;
mustache_TokenType.Partial = ["Partial",4];
mustache_TokenType.Partial.toString = $estr;
mustache_TokenType.Partial.__enum__ = mustache_TokenType;
mustache_TokenType.Comment = ["Comment",5];
mustache_TokenType.Comment.toString = $estr;
mustache_TokenType.Comment.__enum__ = mustache_TokenType;
mustache_TokenType.SetDelimiters = ["SetDelimiters",6];
mustache_TokenType.SetDelimiters.toString = $estr;
mustache_TokenType.SetDelimiters.__enum__ = mustache_TokenType;
var mustache_Token = function(type,value,startIndex,endIndex,subTokens,sectionEndIndex) {
	this.type = type;
	this.value = value;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
	this.subTokens = subTokens;
	this.sectionEndIndex = sectionEndIndex;
};
mustache_Token.__name__ = ["mustache","Token"];
mustache_Token.prototype = {
	type: null
	,value: null
	,startIndex: null
	,endIndex: null
	,subTokens: null
	,sectionEndIndex: null
	,toString: function() {
		return "Token(" + Std.string(this.type) + ", " + JSON.stringify(this.value) + ", " + this.startIndex + ", " + this.endIndex + ", [" + (this.subTokens != null?this.subTokens.join(", "):"") + "], " + this.sectionEndIndex + ")";
	}
	,__class__: mustache_Token
};
var promhx_base_AsyncBase = function(d) {
	this._resolved = false;
	this._pending = false;
	this._errorPending = false;
	this._fulfilled = false;
	this._update = [];
	this._error = [];
	this._errored = false;
	if(d != null) {
		var next = this;
		var f = function(x) {
			return x;
		};
		d._update.push({ async : next, linkf : function(x1) {
			next.handleResolve(f(x1));
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(d,next,f);
	}
};
promhx_base_AsyncBase.__name__ = ["promhx","base","AsyncBase"];
promhx_base_AsyncBase.link = function(current,next,f) {
	current._update.push({ async : next, linkf : function(x) {
		next.handleResolve(f(x));
	}});
	promhx_base_AsyncBase.immediateLinkUpdate(current,next,f);
};
promhx_base_AsyncBase.immediateLinkUpdate = function(current,next,f) {
	if(current._errored && !current._errorPending && current._error.length <= 0) {
		next.handleError(current._errorVal);
	}
	if(current._resolved && !current._pending) {
		try {
			next.handleResolve(f(current._val));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			next.handleError(e);
		}
	}
};
promhx_base_AsyncBase.linkAll = function(all,next) {
	var cthen = function(arr,current,v) {
		if(arr.length == 0 || promhx_base_AsyncBase.allFulfilled(arr)) {
			var _g = [];
			var tmp = $iterator(all)();
			while(tmp.hasNext()) {
				var a = tmp.next();
				_g.push(a == current?v:a._val);
			}
			next.handleResolve(_g);
		}
		return;
	};
	var tmp1 = $iterator(all)();
	while(tmp1.hasNext()) {
		var a1 = tmp1.next();
		var f = [cthen];
		var _g1 = [];
		var tmp2 = $iterator(all)();
		while(tmp2.hasNext()) {
			var a2 = tmp2.next();
			if(a2 != a1) {
				_g1.push(a2);
			}
		}
		a1._update.push({ async : next, linkf : (function(a21,a11,f1) {
			return function(v1) {
				f1[0](a11[0],a21[0],v1);
				return;
			};
		})([a1],[_g1],f)});
	}
	if(promhx_base_AsyncBase.allFulfilled(all)) {
		var _g2 = [];
		var tmp3 = $iterator(all)();
		while(tmp3.hasNext()) _g2.push(tmp3.next()._val);
		next.handleResolve(_g2);
	}
};
promhx_base_AsyncBase.pipeLink = function(current,ret,f) {
	var linked = false;
	var linkf = function(x) {
		if(!linked) {
			linked = true;
			var pipe_ret = f(x);
			pipe_ret._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});
			promhx_base_AsyncBase.immediateLinkUpdate(pipe_ret,ret,function(x1) {
				return x1;
			});
		}
	};
	current._update.push({ async : ret, linkf : linkf});
	if(current._resolved && !current._pending) {
		try {
			linkf(current._val);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			ret.handleError(e);
		}
	}
};
promhx_base_AsyncBase.allResolved = function($as) {
	var tmp = $iterator($as)();
	while(tmp.hasNext()) if(!tmp.next()._resolved) {
		return false;
	}
	return true;
};
promhx_base_AsyncBase.allFulfilled = function($as) {
	var tmp = $iterator($as)();
	while(tmp.hasNext()) if(!tmp.next()._fulfilled) {
		return false;
	}
	return true;
};
promhx_base_AsyncBase.prototype = {
	_val: null
	,_resolved: null
	,_fulfilled: null
	,_pending: null
	,_update: null
	,_error: null
	,_errored: null
	,_errorMap: null
	,_errorVal: null
	,_errorPending: null
	,catchError: function(f) {
		this._error.push(f);
		return this;
	}
	,errorThen: function(f) {
		this._errorMap = f;
		return this;
	}
	,isResolved: function() {
		return this._resolved;
	}
	,isErrored: function() {
		return this._errored;
	}
	,isErrorHandled: function() {
		return this._error.length > 0;
	}
	,isErrorPending: function() {
		return this._errorPending;
	}
	,isFulfilled: function() {
		return this._fulfilled;
	}
	,isPending: function() {
		return this._pending;
	}
	,handleResolve: function(val) {
		this._resolve(val);
	}
	,_resolve: function(val) {
		var _gthis = this;
		if(this._pending) {
			var f = $bind(this,this._resolve);
			var a1 = val;
			promhx_base_EventLoop.queue.add(function() {
				f(a1);
			});
			promhx_base_EventLoop.continueOnNextLoop();
		} else {
			this._resolved = true;
			this._pending = true;
			promhx_base_EventLoop.queue.add(function() {
				_gthis._val = val;
				var _g = 0;
				var _g1 = _gthis._update;
				while(_g < _g1.length) {
					var up = _g1[_g];
					++_g;
					try {
						up.linkf(val);
					} catch( e ) {
						haxe_CallStack.lastException = e;
						if (e instanceof js__$Boot_HaxeError) e = e.val;
						up.async.handleError(e);
					}
				}
				_gthis._fulfilled = true;
				_gthis._pending = false;
			});
			promhx_base_EventLoop.continueOnNextLoop();
		}
	}
	,handleError: function(error) {
		this._handleError(error);
	}
	,_handleError: function(error) {
		var _gthis = this;
		var update_errors = function(e) {
			if(_gthis._error.length > 0) {
				var _g = 0;
				var _g1 = _gthis._error;
				while(_g < _g1.length) {
					var ef = _g1[_g];
					++_g;
					ef(e);
				}
			} else if(_gthis._update.length > 0) {
				var _g2 = 0;
				var _g11 = _gthis._update;
				while(_g2 < _g11.length) {
					var up = _g11[_g2];
					++_g2;
					up.async.handleError(e);
				}
			} else {
				haxe_Log.trace("Call Stack: " + haxe_CallStack.toString(haxe_CallStack.callStack()),{ fileName : "AsyncBase.hx", lineNumber : 165, className : "promhx.base.AsyncBase", methodName : "_handleError"});
				throw js__$Boot_HaxeError.wrap(e);
			}
			_gthis._errorPending = false;
		};
		if(!this._errorPending) {
			this._errorPending = true;
			this._errored = true;
			this._errorVal = error;
			promhx_base_EventLoop.queue.add(function() {
				if(_gthis._errorMap != null) {
					try {
						_gthis._resolve(_gthis._errorMap(error));
					} catch( e1 ) {
						haxe_CallStack.lastException = e1;
						if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
						update_errors(e1);
					}
				} else {
					update_errors(error);
				}
			});
			promhx_base_EventLoop.continueOnNextLoop();
		}
	}
	,then: function(f) {
		var ret = new promhx_base_AsyncBase();
		var next = ret;
		var f1 = f;
		this._update.push({ async : next, linkf : function(x) {
			next.handleResolve(f1(x));
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(this,next,f1);
		return ret;
	}
	,unlink: function(to) {
		var _gthis = this;
		promhx_base_EventLoop.queue.add(function() {
			_gthis._update = _gthis._update.filter(function(x) {
				return x.async != to;
			});
		});
		promhx_base_EventLoop.continueOnNextLoop();
	}
	,isLinked: function(to) {
		var _g = 0;
		var _g1 = this._update;
		while(_g < _g1.length) {
			var u = _g1[_g];
			++_g;
			if(u.async == to) {
				return true;
			}
		}
		return false;
	}
	,__class__: promhx_base_AsyncBase
};
var promhx_Deferred = $hx_exports["promhx"]["Deferred"] = function() {
	promhx_base_AsyncBase.call(this);
};
promhx_Deferred.__name__ = ["promhx","Deferred"];
promhx_Deferred.__super__ = promhx_base_AsyncBase;
promhx_Deferred.prototype = $extend(promhx_base_AsyncBase.prototype,{
	resolve: function(val) {
		this.handleResolve(val);
	}
	,throwError: function(e) {
		this.handleError(e);
	}
	,promise: function() {
		return new promhx_Promise(this);
	}
	,stream: function() {
		return new promhx_Stream(this);
	}
	,publicStream: function() {
		return new promhx_PublicStream(this);
	}
	,__class__: promhx_Deferred
});
var promhx_Promise = $hx_exports["promhx"]["Promise"] = function(d) {
	promhx_base_AsyncBase.call(this,d);
	this._rejected = false;
};
promhx_Promise.__name__ = ["promhx","Promise"];
promhx_Promise.whenAll = function(itb) {
	var ret = new promhx_Promise();
	var all = itb;
	var next = ret;
	var cthen = function(arr,current,v) {
		if(arr.length == 0 || promhx_base_AsyncBase.allFulfilled(arr)) {
			var _g = [];
			var tmp = $iterator(all)();
			while(tmp.hasNext()) {
				var a = tmp.next();
				_g.push(a == current?v:a._val);
			}
			next.handleResolve(_g);
		}
		return;
	};
	var tmp1 = $iterator(all)();
	while(tmp1.hasNext()) {
		var a1 = tmp1.next();
		var f = [cthen];
		var _g1 = [];
		var tmp2 = $iterator(all)();
		while(tmp2.hasNext()) {
			var a2 = tmp2.next();
			if(a2 != a1) {
				_g1.push(a2);
			}
		}
		a1._update.push({ async : next, linkf : (function(a21,a11,f1) {
			return function(v1) {
				f1[0](a11[0],a21[0],v1);
				return;
			};
		})([a1],[_g1],f)});
	}
	if(promhx_base_AsyncBase.allFulfilled(all)) {
		var _g2 = [];
		var tmp3 = $iterator(all)();
		while(tmp3.hasNext()) _g2.push(tmp3.next()._val);
		next.handleResolve(_g2);
	}
	return ret;
};
promhx_Promise.promise = function(_val) {
	var ret = new promhx_Promise();
	ret.handleResolve(_val);
	return ret;
};
promhx_Promise.__super__ = promhx_base_AsyncBase;
promhx_Promise.prototype = $extend(promhx_base_AsyncBase.prototype,{
	_rejected: null
	,isRejected: function() {
		return this._rejected;
	}
	,reject: function(e) {
		this._rejected = true;
		this.handleError(e);
	}
	,handleResolve: function(val) {
		if(this._resolved) {
			throw new js__$Boot_HaxeError(promhx_error_PromiseError.AlreadyResolved("Promise has already been resolved"));
		}
		this._resolve(val);
	}
	,then: function(f) {
		var ret = new promhx_Promise();
		var next = ret;
		var f1 = f;
		this._update.push({ async : next, linkf : function(x) {
			next.handleResolve(f1(x));
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(this,next,f1);
		return ret;
	}
	,unlink: function(to) {
		var _gthis = this;
		promhx_base_EventLoop.queue.add(function() {
			if(!_gthis._fulfilled) {
				_gthis.handleError(promhx_error_PromiseError.DownstreamNotFullfilled("Downstream Promise is not fullfilled"));
			} else {
				_gthis._update = _gthis._update.filter(function(x) {
					return x.async != to;
				});
			}
		});
		promhx_base_EventLoop.continueOnNextLoop();
	}
	,handleError: function(error) {
		this._rejected = true;
		this._handleError(error);
	}
	,pipe: function(f) {
		var ret = new promhx_Promise();
		var ret1 = ret;
		var f1 = f;
		var linked = false;
		var linkf = function(x) {
			if(!linked) {
				linked = true;
				var pipe_ret = f1(x);
				pipe_ret._update.push({ async : ret1, linkf : $bind(ret1,ret1.handleResolve)});
				promhx_base_AsyncBase.immediateLinkUpdate(pipe_ret,ret1,function(x1) {
					return x1;
				});
			}
		};
		this._update.push({ async : ret1, linkf : linkf});
		if(this._resolved && !this._pending) {
			try {
				linkf(this._val);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				ret1.handleError(e);
			}
		}
		return ret;
	}
	,errorPipe: function(f) {
		var ret = new promhx_Promise();
		this.catchError(function(e) {
			f(e).then($bind(ret,ret._resolve));
		});
		this.then($bind(ret,ret._resolve));
		return ret;
	}
	,__class__: promhx_Promise
});
var promhx_Stream = $hx_exports["promhx"]["Stream"] = function(d) {
	promhx_base_AsyncBase.call(this,d);
	this._end_deferred = new promhx_Deferred();
	this._end_promise = this._end_deferred.promise();
};
promhx_Stream.__name__ = ["promhx","Stream"];
promhx_Stream.foreach = function(itb) {
	var s = new promhx_Stream();
	var tmp = $iterator(itb)();
	while(tmp.hasNext()) s.handleResolve(tmp.next());
	s.end();
	return s;
};
promhx_Stream.wheneverAll = function(itb) {
	var ret = new promhx_Stream();
	var all = itb;
	var next = ret;
	var cthen = function(arr,current,v) {
		if(arr.length == 0 || promhx_base_AsyncBase.allFulfilled(arr)) {
			var _g = [];
			var tmp = $iterator(all)();
			while(tmp.hasNext()) {
				var a = tmp.next();
				_g.push(a == current?v:a._val);
			}
			next.handleResolve(_g);
		}
		return;
	};
	var tmp1 = $iterator(all)();
	while(tmp1.hasNext()) {
		var a1 = tmp1.next();
		var f = [cthen];
		var _g1 = [];
		var tmp2 = $iterator(all)();
		while(tmp2.hasNext()) {
			var a2 = tmp2.next();
			if(a2 != a1) {
				_g1.push(a2);
			}
		}
		a1._update.push({ async : next, linkf : (function(a21,a11,f1) {
			return function(v1) {
				f1[0](a11[0],a21[0],v1);
				return;
			};
		})([a1],[_g1],f)});
	}
	if(promhx_base_AsyncBase.allFulfilled(all)) {
		var _g2 = [];
		var tmp3 = $iterator(all)();
		while(tmp3.hasNext()) _g2.push(tmp3.next()._val);
		next.handleResolve(_g2);
	}
	return ret;
};
promhx_Stream.concatAll = function(itb) {
	var ret = new promhx_Stream();
	var tmp = $iterator(itb)();
	while(tmp.hasNext()) ret.concat(tmp.next());
	return ret;
};
promhx_Stream.mergeAll = function(itb) {
	var ret = new promhx_Stream();
	var tmp = $iterator(itb)();
	while(tmp.hasNext()) ret.merge(tmp.next());
	return ret;
};
promhx_Stream.stream = function(_val) {
	var ret = new promhx_Stream();
	ret.handleResolve(_val);
	return ret;
};
promhx_Stream.__super__ = promhx_base_AsyncBase;
promhx_Stream.prototype = $extend(promhx_base_AsyncBase.prototype,{
	deferred: null
	,_pause: null
	,_end: null
	,_end_promise: null
	,_end_deferred: null
	,then: function(f) {
		var ret = new promhx_Stream();
		var next = ret;
		var f1 = f;
		this._update.push({ async : next, linkf : function(x) {
			next.handleResolve(f1(x));
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(this,next,f1);
		this._end_promise.then(function(x1) {
			ret.end();
		});
		return ret;
	}
	,detachStream: function(str) {
		var filtered = [];
		var removed = false;
		var _g = 0;
		var _g1 = this._update;
		while(_g < _g1.length) {
			var u = _g1[_g];
			++_g;
			if(u.async == str) {
				removed = true;
			} else {
				filtered.push(u);
			}
		}
		this._update = filtered;
		return removed;
	}
	,first: function() {
		var s = new promhx_Promise();
		this.then(function(x) {
			if(!s._resolved) {
				s.handleResolve(x);
			}
		});
		return s;
	}
	,handleResolve: function(val) {
		if(!this._end && !this._pause) {
			this._resolve(val);
		}
	}
	,pause: function(set) {
		if(set == null) {
			set = !this._pause;
		}
		this._pause = set;
	}
	,pipe: function(f) {
		var ret = new promhx_Stream();
		var ret1 = ret;
		var f1 = f;
		var linked = false;
		var linkf = function(x) {
			if(!linked) {
				linked = true;
				var pipe_ret = f1(x);
				pipe_ret._update.push({ async : ret1, linkf : $bind(ret1,ret1.handleResolve)});
				promhx_base_AsyncBase.immediateLinkUpdate(pipe_ret,ret1,function(x1) {
					return x1;
				});
			}
		};
		this._update.push({ async : ret1, linkf : linkf});
		if(this._resolved && !this._pending) {
			try {
				linkf(this._val);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				ret1.handleError(e);
			}
		}
		this._end_promise.then(function(x2) {
			ret.end();
		});
		return ret;
	}
	,errorPipe: function(f) {
		var ret = new promhx_Stream();
		this.catchError(function(e) {
			var piped = f(e);
			piped.then($bind(ret,ret._resolve));
			piped._end_promise.then(($_=ret._end_promise,$bind($_,$_._resolve)));
		});
		this.then($bind(ret,ret._resolve));
		this._end_promise.then(function(x) {
			ret.end();
		});
		return ret;
	}
	,handleEnd: function() {
		if(this._pending) {
			promhx_base_EventLoop.queue.add($bind(this,this.handleEnd));
			promhx_base_EventLoop.continueOnNextLoop();
		} else if(this._end_promise._resolved) {
			return;
		} else {
			this._end = true;
			this._end_promise.handleResolve(this._resolved?haxe_ds_Option.Some(this._val):haxe_ds_Option.None);
			this._update = [];
			this._error = [];
		}
	}
	,end: function() {
		promhx_base_EventLoop.queue.add($bind(this,this.handleEnd));
		promhx_base_EventLoop.continueOnNextLoop();
		return this;
	}
	,endThen: function(f) {
		return this._end_promise.then(f);
	}
	,filter: function(f) {
		var ret = new promhx_Stream();
		this._update.push({ async : ret, linkf : function(x) {
			if(f(x)) {
				ret.handleResolve(x);
			}
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(this,ret,function(x1) {
			return x1;
		});
		return ret;
	}
	,concat: function(s) {
		var ret = new promhx_Stream();
		this._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});
		promhx_base_AsyncBase.immediateLinkUpdate(this,ret,function(x) {
			return x;
		});
		this._end_promise.then(function(_) {
			s.pipe(function(x1) {
				ret.handleResolve(x1);
				return ret;
			});
			s._end_promise.then(function(_1) {
				ret.end();
			});
		});
		return ret;
	}
	,merge: function(s) {
		var ret = new promhx_Stream();
		this._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});
		s._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});
		promhx_base_AsyncBase.immediateLinkUpdate(this,ret,function(x) {
			return x;
		});
		promhx_base_AsyncBase.immediateLinkUpdate(s,ret,function(x1) {
			return x1;
		});
		return ret;
	}
	,__class__: promhx_Stream
});
var promhx_PublicStream = $hx_exports["promhx"]["PublicStream"] = function(def) {
	promhx_Stream.call(this,def);
};
promhx_PublicStream.__name__ = ["promhx","PublicStream"];
promhx_PublicStream.publicstream = function(val) {
	var ps = new promhx_PublicStream();
	ps.handleResolve(val);
	return ps;
};
promhx_PublicStream.__super__ = promhx_Stream;
promhx_PublicStream.prototype = $extend(promhx_Stream.prototype,{
	resolve: function(val) {
		this.handleResolve(val);
	}
	,throwError: function(e) {
		this.handleError(e);
	}
	,update: function(val) {
		this.handleResolve(val);
	}
	,__class__: promhx_PublicStream
});
var promhx_base_EventLoop = function() { };
promhx_base_EventLoop.__name__ = ["promhx","base","EventLoop"];
promhx_base_EventLoop.enqueue = function(eqf) {
	promhx_base_EventLoop.queue.add(eqf);
	promhx_base_EventLoop.continueOnNextLoop();
};
promhx_base_EventLoop.set_nextLoop = function(f) {
	if(promhx_base_EventLoop.nextLoop != null) {
		throw new js__$Boot_HaxeError("nextLoop has already been set");
	} else {
		promhx_base_EventLoop.nextLoop = f;
	}
	return promhx_base_EventLoop.nextLoop;
};
promhx_base_EventLoop.queueEmpty = function() {
	return promhx_base_EventLoop.queue.isEmpty();
};
promhx_base_EventLoop.finish = function(max_iterations) {
	if(max_iterations == null) {
		max_iterations = 1000;
	}
	var fn = null;
	while(true) {
		var tmp;
		if(max_iterations-- > 0) {
			fn = promhx_base_EventLoop.queue.pop();
			tmp = fn != null;
		} else {
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		fn();
	}
	return promhx_base_EventLoop.queue.isEmpty();
};
promhx_base_EventLoop.clear = function() {
	promhx_base_EventLoop.queue = new List();
};
promhx_base_EventLoop.f = function() {
	var fn = promhx_base_EventLoop.queue.pop();
	if(fn != null) {
		fn();
	}
	if(!promhx_base_EventLoop.queue.isEmpty()) {
		promhx_base_EventLoop.continueOnNextLoop();
	}
};
promhx_base_EventLoop.continueOnNextLoop = function() {
	if(promhx_base_EventLoop.nextLoop != null) {
		promhx_base_EventLoop.nextLoop(promhx_base_EventLoop.f);
	} else {
		setImmediate(promhx_base_EventLoop.f);
	}
};
var promhx_error_PromiseError = { __ename__ : ["promhx","error","PromiseError"], __constructs__ : ["AlreadyResolved","DownstreamNotFullfilled"] };
promhx_error_PromiseError.AlreadyResolved = function(message) { var $x = ["AlreadyResolved",0,message]; $x.__enum__ = promhx_error_PromiseError; $x.toString = $estr; return $x; };
promhx_error_PromiseError.DownstreamNotFullfilled = function(message) { var $x = ["DownstreamNotFullfilled",1,message]; $x.__enum__ = promhx_error_PromiseError; $x.toString = $estr; return $x; };
var utest_Assert = function() { };
utest_Assert.__name__ = ["utest","Assert"];
utest_Assert.isTrue = function(cond,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert.results is not currently bound to any assert context");
	}
	if(null == msg) {
		msg = "expected true";
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg,pos));
	}
};
utest_Assert.isFalse = function(value,msg,pos) {
	if(null == msg) {
		msg = "expected false";
	}
	utest_Assert.isTrue(value == false,msg,pos);
};
utest_Assert.isNull = function(value,msg,pos) {
	if(msg == null) {
		msg = "expected null but it is " + utest_Assert.q(value);
	}
	utest_Assert.isTrue(value == null,msg,pos);
};
utest_Assert.notNull = function(value,msg,pos) {
	if(null == msg) {
		msg = "expected not null";
	}
	utest_Assert.isTrue(value != null,msg,pos);
};
utest_Assert["is"] = function(value,type,msg,pos) {
	if(msg == null) {
		msg = "expected type " + utest_Assert.typeToString(type) + " but it is " + utest_Assert.typeToString(value);
	}
	utest_Assert.isTrue(js_Boot.__instanceof(value,type),msg,pos);
};
utest_Assert.notEquals = function(expected,value,msg,pos) {
	if(msg == null) {
		msg = "expected " + utest_Assert.q(expected) + " and test value " + utest_Assert.q(value) + " should be different";
	}
	utest_Assert.isFalse(expected == value,msg,pos);
};
utest_Assert.equals = function(expected,value,msg,pos) {
	if(msg == null) {
		msg = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value);
	}
	utest_Assert.isTrue(expected == value,msg,pos);
};
utest_Assert.match = function(pattern,value,msg,pos) {
	if(msg == null) {
		msg = "the value " + utest_Assert.q(value) + " does not match the provided pattern";
	}
	utest_Assert.isTrue(pattern.match(value),msg,pos);
};
utest_Assert.floatEquals = function(expected,value,approx,msg,pos) {
	if(msg == null) {
		msg = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value);
	}
	utest_Assert.isTrue(utest_Assert._floatEquals(expected,value,approx),msg,pos);
	return;
};
utest_Assert._floatEquals = function(expected,value,approx) {
	if(isNaN(expected)) {
		return isNaN(value);
	} else if(isNaN(value)) {
		return false;
	} else if(!isFinite(expected) && !isFinite(value)) {
		return expected > 0 == value > 0;
	}
	if(null == approx) {
		approx = 1e-5;
	}
	return Math.abs(value - expected) <= approx;
};
utest_Assert.getTypeName = function(v) {
	var _g = Type["typeof"](v);
	switch(_g[1]) {
	case 0:
		return "`null`";
	case 1:
		return "Int";
	case 2:
		return "Float";
	case 3:
		return "Bool";
	case 4:
		return "Object";
	case 5:
		return "function";
	case 6:
		return Type.getClassName(_g[2]);
	case 7:
		return Type.getEnumName(_g[2]);
	case 8:
		return "`Unknown`";
	}
};
utest_Assert.isIterable = function(v,isAnonym) {
	if(!Lambda.has(isAnonym?Reflect.fields(v):Type.getInstanceFields(v == null?null:js_Boot.getClass(v)),"iterator")) {
		return false;
	}
	return Reflect.isFunction(Reflect.field(v,"iterator"));
};
utest_Assert.isIterator = function(v,isAnonym) {
	var fields = isAnonym?Reflect.fields(v):Type.getInstanceFields(v == null?null:js_Boot.getClass(v));
	if(!Lambda.has(fields,"next") || !Lambda.has(fields,"hasNext")) {
		return false;
	}
	if(Reflect.isFunction(Reflect.field(v,"next"))) {
		return Reflect.isFunction(Reflect.field(v,"hasNext"));
	} else {
		return false;
	}
};
utest_Assert.sameAs = function(expected,value,status) {
	var texpected = utest_Assert.getTypeName(expected);
	var tvalue = utest_Assert.getTypeName(value);
	if(texpected != tvalue) {
		status.error = "expected type " + texpected + " but it is " + tvalue + (status.path == ""?"":" for field " + status.path);
		return false;
	}
	var _g = Type["typeof"](expected);
	switch(_g[1]) {
	case 0:case 1:case 3:
		if(expected != value) {
			status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == ""?"":" for field " + status.path);
			return false;
		}
		return true;
	case 2:
		if(!utest_Assert._floatEquals(expected,value)) {
			status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == ""?"":" for field " + status.path);
			return false;
		}
		return true;
	case 4:
		if(status.recursive || status.path == "") {
			var tfields = Reflect.fields(value);
			var fields = Reflect.fields(expected);
			var path = status.path;
			var _g1 = 0;
			while(_g1 < fields.length) {
				var field = fields[_g1];
				++_g1;
				HxOverrides.remove(tfields,field);
				status.path = path == ""?field:path + "." + field;
				if(!Object.prototype.hasOwnProperty.call(value,field)) {
					status.error = "expected field " + status.path + " does not exist in " + utest_Assert.q(value);
					return false;
				}
				var e = Reflect.field(expected,field);
				if(Reflect.isFunction(e)) {
					continue;
				}
				if(!utest_Assert.sameAs(e,Reflect.field(value,field),status)) {
					return false;
				}
			}
			if(tfields.length > 0) {
				status.error = "the tested object has extra field(s) (" + tfields.join(", ") + ") not included in the expected ones";
				return false;
			}
		}
		if(utest_Assert.isIterator(expected,true)) {
			if(!utest_Assert.isIterator(value,true)) {
				status.error = "expected Iterable but it is not " + (status.path == ""?"":" for field " + status.path);
				return false;
			}
			if(status.recursive || status.path == "") {
				var evalues = Lambda.array({ iterator : function() {
					return expected;
				}});
				var vvalues = Lambda.array({ iterator : function() {
					return value;
				}});
				if(evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterator but they are " + vvalues.length + (status.path == ""?"":" for field " + status.path);
					return false;
				}
				var path1 = status.path;
				var _g11 = 0;
				var _g2 = evalues.length;
				while(_g11 < _g2) {
					var i = _g11++;
					status.path = path1 == ""?"iterator[" + i + "]":path1 + "[" + i + "]";
					if(!utest_Assert.sameAs(evalues[i],vvalues[i],status)) {
						status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == ""?"":" for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterable(expected,true)) {
			if(!utest_Assert.isIterable(value,true)) {
				status.error = "expected Iterator but it is not " + (status.path == ""?"":" for field " + status.path);
				return false;
			}
			if(status.recursive || status.path == "") {
				var evalues1 = Lambda.array(expected);
				var vvalues1 = Lambda.array(value);
				if(evalues1.length != vvalues1.length) {
					status.error = "expected " + evalues1.length + " values in Iterable but they are " + vvalues1.length + (status.path == ""?"":" for field " + status.path);
					return false;
				}
				var path2 = status.path;
				var _g12 = 0;
				var _g3 = evalues1.length;
				while(_g12 < _g3) {
					var i1 = _g12++;
					status.path = path2 == ""?"iterable[" + i1 + "]":path2 + "[" + i1 + "]";
					if(!utest_Assert.sameAs(evalues1[i1],vvalues1[i1],status)) {
						return false;
					}
				}
			}
			return true;
		}
		return true;
	case 5:
		if(!Reflect.compareMethods(expected,value)) {
			status.error = "expected same function reference" + (status.path == ""?"":" for field " + status.path);
			return false;
		}
		return true;
	case 6:
		var cexpected = Type.getClassName(_g[2]);
		var o = value;
		var cvalue = Type.getClassName(o == null?null:js_Boot.getClass(o));
		if(cexpected != cvalue) {
			status.error = "expected instance of " + utest_Assert.q(cexpected) + " but it is " + utest_Assert.q(cvalue) + (status.path == ""?"":" for field " + status.path);
			return false;
		}
		if(typeof(expected) == "string" && expected != value) {
			status.error = "expected '" + Std.string(expected) + "' but it is '" + Std.string(value) + "'";
			return false;
		}
		if((expected instanceof Array) && expected.__enum__ == null) {
			if(status.recursive || status.path == "") {
				if(expected.length != value.length) {
					status.error = "expected " + Std.string(expected.length) + " elements but they are " + Std.string(value.length) + (status.path == ""?"":" for field " + status.path);
					return false;
				}
				var path3 = status.path;
				var _g13 = 0;
				var _g4 = expected.length;
				while(_g13 < _g4) {
					var i2 = _g13++;
					status.path = path3 == ""?"array[" + i2 + "]":path3 + "[" + i2 + "]";
					if(!utest_Assert.sameAs(expected[i2],value[i2],status)) {
						status.error = "expected " + utest_Assert.q(expected[i2]) + " but it is " + utest_Assert.q(value[i2]) + (status.path == ""?"":" for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(js_Boot.__instanceof(expected,Date)) {
			if(expected.getTime() != value.getTime()) {
				status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == ""?"":" for field " + status.path);
				return false;
			}
			return true;
		}
		if(js_Boot.__instanceof(expected,haxe_io_Bytes)) {
			if(status.recursive || status.path == "") {
				var ebytes = expected;
				var vbytes = value;
				if(ebytes.length != vbytes.length) {
					return false;
				}
				var _g14 = 0;
				var _g5 = ebytes.length;
				while(_g14 < _g5) {
					var i3 = _g14++;
					if(ebytes.b[i3] != vbytes.b[i3]) {
						status.error = "expected byte " + ebytes.b[i3] + " but it is " + vbytes.b[i3] + (status.path == ""?"":" for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(js_Boot.__instanceof(expected,haxe_IMap)) {
			if(status.recursive || status.path == "") {
				var map = js_Boot.__cast(expected , haxe_IMap);
				var vmap = js_Boot.__cast(value , haxe_IMap);
				var _g6 = [];
				var tmp = map.keys();
				while(tmp.hasNext()) _g6.push(tmp.next());
				var keys = _g6;
				var _g15 = [];
				var tmp1 = vmap.keys();
				while(tmp1.hasNext()) _g15.push(tmp1.next());
				var vkeys = _g15;
				if(keys.length != vkeys.length) {
					status.error = "expected " + keys.length + " keys but they are " + vkeys.length + (status.path == ""?"":" for field " + status.path);
					return false;
				}
				var path4 = status.path;
				var _g21 = 0;
				while(_g21 < keys.length) {
					var key = keys[_g21];
					++_g21;
					status.path = path4 == ""?"hash[" + Std.string(key) + "]":path4 + "[" + Std.string(key) + "]";
					if(!utest_Assert.sameAs(map.get(key),vmap.get(key),status)) {
						status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == ""?"":" for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterator(expected,false)) {
			if(status.recursive || status.path == "") {
				var evalues2 = Lambda.array({ iterator : function() {
					return expected;
				}});
				var vvalues2 = Lambda.array({ iterator : function() {
					return value;
				}});
				if(evalues2.length != vvalues2.length) {
					status.error = "expected " + evalues2.length + " values in Iterator but they are " + vvalues2.length + (status.path == ""?"":" for field " + status.path);
					return false;
				}
				var path5 = status.path;
				var _g16 = 0;
				var _g7 = evalues2.length;
				while(_g16 < _g7) {
					var i4 = _g16++;
					status.path = path5 == ""?"iterator[" + i4 + "]":path5 + "[" + i4 + "]";
					if(!utest_Assert.sameAs(evalues2[i4],vvalues2[i4],status)) {
						status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == ""?"":" for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterable(expected,false)) {
			if(status.recursive || status.path == "") {
				var evalues3 = Lambda.array(expected);
				var vvalues3 = Lambda.array(value);
				if(evalues3.length != vvalues3.length) {
					status.error = "expected " + evalues3.length + " values in Iterable but they are " + vvalues3.length + (status.path == ""?"":" for field " + status.path);
					return false;
				}
				var path6 = status.path;
				var _g17 = 0;
				var _g8 = evalues3.length;
				while(_g17 < _g8) {
					var i5 = _g17++;
					status.path = path6 == ""?"iterable[" + i5 + "]":path6 + "[" + i5 + "]";
					if(!utest_Assert.sameAs(evalues3[i5],vvalues3[i5],status)) {
						return false;
					}
				}
			}
			return true;
		}
		if(status.recursive || status.path == "") {
			var o1 = expected;
			var fields1 = Type.getInstanceFields(o1 == null?null:js_Boot.getClass(o1));
			var path7 = status.path;
			var _g9 = 0;
			while(_g9 < fields1.length) {
				var field1 = fields1[_g9];
				++_g9;
				status.path = path7 == ""?field1:path7 + "." + field1;
				var e1 = Reflect.field(expected,field1);
				if(Reflect.isFunction(e1)) {
					continue;
				}
				if(!utest_Assert.sameAs(e1,Reflect.field(value,field1),status)) {
					return false;
				}
			}
		}
		return true;
	case 7:
		var eexpected = Type.getEnumName(_g[2]);
		var evalue = Type.getEnumName(Type.getEnum(value));
		if(eexpected != evalue) {
			status.error = "expected enumeration of " + utest_Assert.q(eexpected) + " but it is " + utest_Assert.q(evalue) + (status.path == ""?"":" for field " + status.path);
			return false;
		}
		if(status.recursive || status.path == "") {
			if(expected[1] != value[1]) {
				status.error = "expected " + utest_Assert.q(expected[0]) + " but it is " + utest_Assert.q(value[0]) + (status.path == ""?"":" for field " + status.path);
				return false;
			}
			var eparams = expected.slice(2);
			var vparams = value.slice(2);
			var path8 = status.path;
			var _g18 = 0;
			var _g10 = eparams.length;
			while(_g18 < _g10) {
				var i6 = _g18++;
				status.path = path8 == ""?"enum[" + i6 + "]":path8 + "[" + i6 + "]";
				if(!utest_Assert.sameAs(eparams[i6],vparams[i6],status)) {
					status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == ""?"":" for field " + status.path);
					return false;
				}
			}
		}
		return true;
	case 8:
		throw new js__$Boot_HaxeError("Unable to compare two unknown types");
		break;
	}
};
utest_Assert.q = function(v) {
	if(typeof(v) == "string") {
		return "\"" + StringTools.replace(v,"\"","\\\"") + "\"";
	} else {
		return Std.string(v);
	}
};
utest_Assert.same = function(expected,value,recursive,msg,pos) {
	var status = { recursive : null == recursive?true:recursive, path : "", error : null};
	if(utest_Assert.sameAs(expected,value,status)) {
		utest_Assert.pass(msg,pos);
	} else {
		utest_Assert.fail(msg == null?status.error:msg,pos);
	}
};
utest_Assert.raises = function(method,type,msgNotThrown,msgWrongType,pos) {
	try {
		method();
		var name = Type.getClassName(type);
		if(name == null) {
			name = "Dynamic";
		}
		if(null == msgNotThrown) {
			msgNotThrown = "exception of type " + name + " not raised";
		}
		utest_Assert.fail(msgNotThrown,pos);
	} catch( ex ) {
		haxe_CallStack.lastException = ex;
		if (ex instanceof js__$Boot_HaxeError) ex = ex.val;
		if(null == type) {
			utest_Assert.pass(null,pos);
		} else {
			var name1 = Type.getClassName(type);
			if(null == msgWrongType) {
				msgWrongType = "expected throw of type " + name1 + " but it is " + Std.string(ex);
			}
			utest_Assert.isTrue(js_Boot.__instanceof(ex,type),msgWrongType,pos);
		}
	}
};
utest_Assert.allows = function(possibilities,value,msg,pos) {
	if(Lambda.has(possibilities,value)) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null?"value " + utest_Assert.q(value) + " not found in the expected possibilities " + Std.string(possibilities):msg,pos);
	}
};
utest_Assert.contains = function(match,values,msg,pos) {
	if(Lambda.has(values,match)) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null?"values " + utest_Assert.q(values) + " do not contain " + Std.string(match):msg,pos);
	}
};
utest_Assert.notContains = function(match,values,msg,pos) {
	if(!Lambda.has(values,match)) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null?"values " + utest_Assert.q(values) + " do contain " + Std.string(match):msg,pos);
	}
};
utest_Assert.stringContains = function(match,value,msg,pos) {
	if(value != null && value.indexOf(match) >= 0) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null?"value " + utest_Assert.q(value) + " does not contain " + utest_Assert.q(match):msg,pos);
	}
};
utest_Assert.stringSequence = function(sequence,value,msg,pos) {
	if(null == value) {
		utest_Assert.fail(msg == null?"null argument value":msg,pos);
		return;
	}
	var p = 0;
	var _g = 0;
	while(_g < sequence.length) {
		var s = sequence[_g];
		++_g;
		var p2 = value.indexOf(s,p);
		if(p2 < 0) {
			if(msg == null) {
				msg = "expected '" + s + "' after ";
				if(p > 0) {
					var cut = HxOverrides.substr(value,0,p);
					if(cut.length > 30) {
						cut = "..." + HxOverrides.substr(cut,-27,null);
					}
					msg += " '" + cut + "'";
				} else {
					msg += " begin";
				}
			}
			utest_Assert.fail(msg,pos);
			return;
		}
		p = p2 + s.length;
	}
	utest_Assert.isTrue(true,msg,pos);
};
utest_Assert.pass = function(msg,pos) {
	if(msg == null) {
		msg = "pass expected";
	}
	utest_Assert.isTrue(true,msg,pos);
};
utest_Assert.fail = function(msg,pos) {
	if(msg == null) {
		msg = "failure expected";
	}
	utest_Assert.isTrue(false,msg,pos);
};
utest_Assert.warn = function(msg) {
	utest_Assert.results.add(utest_Assertation.Warning(msg));
};
utest_Assert.createAsync = function(f,timeout) {
	return function() {
	};
};
utest_Assert.createEvent = function(f,timeout) {
	return function(e) {
	};
};
utest_Assert.typeToString = function(t) {
	try {
		var o = t;
		var _t = o == null?null:js_Boot.getClass(o);
		if(_t != null) {
			t = _t;
		}
	} catch( e ) {
		haxe_CallStack.lastException = e;
	}
	try {
		return Type.getClassName(t);
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
	}
	try {
		var _t1 = Type.getEnum(t);
		if(_t1 != null) {
			t = _t1;
		}
	} catch( e2 ) {
		haxe_CallStack.lastException = e2;
	}
	try {
		return Type.getEnumName(t);
	} catch( e3 ) {
		haxe_CallStack.lastException = e3;
	}
	try {
		return Std.string(Type["typeof"](t));
	} catch( e4 ) {
		haxe_CallStack.lastException = e4;
	}
	try {
		return Std.string(t);
	} catch( e5 ) {
		haxe_CallStack.lastException = e5;
	}
	return "<unable to retrieve type name>";
};
var utest_Assertation = { __ename__ : ["utest","Assertation"], __constructs__ : ["Success","Failure","Error","SetupError","TeardownError","TimeoutError","AsyncError","Warning"] };
utest_Assertation.Success = function(pos) { var $x = ["Success",0,pos]; $x.__enum__ = utest_Assertation; $x.toString = $estr; return $x; };
utest_Assertation.Failure = function(msg,pos) { var $x = ["Failure",1,msg,pos]; $x.__enum__ = utest_Assertation; $x.toString = $estr; return $x; };
utest_Assertation.Error = function(e,stack) { var $x = ["Error",2,e,stack]; $x.__enum__ = utest_Assertation; $x.toString = $estr; return $x; };
utest_Assertation.SetupError = function(e,stack) { var $x = ["SetupError",3,e,stack]; $x.__enum__ = utest_Assertation; $x.toString = $estr; return $x; };
utest_Assertation.TeardownError = function(e,stack) { var $x = ["TeardownError",4,e,stack]; $x.__enum__ = utest_Assertation; $x.toString = $estr; return $x; };
utest_Assertation.TimeoutError = function(missedAsyncs,stack) { var $x = ["TimeoutError",5,missedAsyncs,stack]; $x.__enum__ = utest_Assertation; $x.toString = $estr; return $x; };
utest_Assertation.AsyncError = function(e,stack) { var $x = ["AsyncError",6,e,stack]; $x.__enum__ = utest_Assertation; $x.toString = $estr; return $x; };
utest_Assertation.Warning = function(msg) { var $x = ["Warning",7,msg]; $x.__enum__ = utest_Assertation; $x.toString = $estr; return $x; };
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
Mustache.tags = ["{{","}}"];
Mustache.tagRe = new EReg("#|\\^|/|>|\\{|&|=|!","");
Mustache.whiteRe = new EReg("\\s*","");
Mustache.spaceRe = new EReg("\\s+","");
Mustache.equalsRe = new EReg("\\s*=","");
Mustache.curlyRe = new EReg("\\s*\\}","");
Mustache.defaultWriter = new mustache_Writer();
Mustache.escapeRegExpRe = new EReg("[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]","g");
Mustache.nonSpaceRe = new EReg("\\S","");
Mustache.entityMap = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["&"] != null) {
		_g.setReserved("&","&amp;");
	} else {
		_g.h["&"] = "&amp;";
	}
	if(__map_reserved["<"] != null) {
		_g.setReserved("<","&lt;");
	} else {
		_g.h["<"] = "&lt;";
	}
	if(__map_reserved[">"] != null) {
		_g.setReserved(">","&gt;");
	} else {
		_g.h[">"] = "&gt;";
	}
	if(__map_reserved["\""] != null) {
		_g.setReserved("\"","&quot;");
	} else {
		_g.h["\""] = "&quot;";
	}
	if(__map_reserved["'"] != null) {
		_g.setReserved("'","&#39;");
	} else {
		_g.h["'"] = "&#39;";
	}
	if(__map_reserved["/"] != null) {
		_g.setReserved("/","&#x2F;");
	} else {
		_g.h["/"] = "&#x2F;";
	}
	if(__map_reserved["`"] != null) {
		_g.setReserved("`","&#x60;");
	} else {
		_g.h["`"] = "&#x60;";
	}
	if(__map_reserved["="] != null) {
		_g.setReserved("=","&#x3D;");
	} else {
		_g.h["="] = "&#x3D;";
	}
	$r = _g;
	return $r;
}(this));
Mustache.escapeRe = new EReg("[&<>\"'`=/]","g");
TestSpec.specsDir = "spec/specs";
TestSpec.specFiles = (function($this) {
	var $r;
	var result = [];
	{
		var _g = 0;
		var _g1 = js_node_Fs.readdirSync("spec/specs");
		while(_g < _g1.length) {
			var file = _g1[_g];
			++_g;
			var p = new haxe_io_Path(file);
			if(p.ext == "json" && p.file != "~lambdas") {
				result.push(p.file);
			}
		}
	}
	$r = result;
	return $r;
}(this));
js_Boot.__toStr = { }.toString;
promhx_base_EventLoop.queue = new List();
TestMain.main();
})(typeof window != "undefined" ? window : typeof exports != "undefined" ? exports : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
