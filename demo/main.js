// Generated by Haxe
(function () { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0?s:HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0?HxOverrides.substr(s,pos,null):HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var dataTextArea = window.document.getElementById("data");
	var templateTextArea = window.document.getElementById("template");
	var resultCode = window.document.getElementById("result");
	var dataErrorSpan = window.document.getElementById("data-error");
	var templateErrorSpan = window.document.getElementById("template-error");
	var render = function() {
		var template = templateTextArea.value;
		dataErrorSpan.textContent = "";
		templateErrorSpan.textContent = "";
		var data;
		if(StringTools.trim(dataTextArea.value).length == 0) {
			data = { };
		} else {
			try {
				data = JSON.parse(dataTextArea.value);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				dataErrorSpan.textContent = " (ERROR: " + Std.string(e) + ")";
				return;
			}
		}
		var tmp;
		try {
			var this1 = new mustache__$Context_ContextImpl(data,null,null);
			var context = this1;
			var _this = Mustache.defaultWriter;
			tmp = _this.renderTokens(_this.parse(template),context,null,template);
		} catch( e1 ) {
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			templateErrorSpan.textContent = " (ERROR: " + Std.string(e1) + ")";
			return;
		}
		resultCode.innerText = tmp;
		hljs.highlightBlock(resultCode);
	};
	dataTextArea.oninput = dataTextArea.oninput = render;
	templateTextArea.oninput = templateTextArea.oninput = render;
	render();
};
Math.__name__ = true;
var mustache_Writer = function() {
	this.cache = new haxe_ds_StringMap();
};
mustache_Writer.__name__ = true;
mustache_Writer.prototype = {
	parse: function(template,tags) {
		var _this = this.cache;
		var tokens = __map_reserved[template] != null?_this.getReserved(template):_this.h[template];
		if(tokens == null) {
			var v = Mustache.parseTemplate(template,tags);
			var _this1 = this.cache;
			if(__map_reserved[template] != null) {
				_this1.setReserved(template,v);
			} else {
				_this1.h[template] = v;
			}
			tokens = v;
		}
		return tokens;
	}
	,render: function(template,context,partials) {
		return this.renderTokens(this.parse(template),context,partials,template);
	}
	,renderTokens: function(tokens,context,partials,originalTemplate) {
		var buffer = "";
		var _g = 0;
		while(_g < tokens.length) {
			var token = tokens[_g];
			++_g;
			var value;
			var _g1 = token.type;
			switch(_g1[1]) {
			case 0:
				value = token.value;
				break;
			case 1:
				var $escape = _g1[2];
				var value1 = context.lookup(token.value);
				if(value1 == null) {
					value = null;
				} else if($escape) {
					value = Mustache.escape(Std.string(value1));
				} else {
					value = Std.string(value1);
				}
				break;
			case 2:
				if(_g1[2]) {
					value = this.renderInverted(token,context,partials,originalTemplate);
				} else {
					value = this.renderSection(token,context,partials,originalTemplate);
				}
				break;
			case 4:
				value = this.renderPartial(token,context,partials);
				break;
			case 3:case 5:case 6:
				continue;
				break;
			case 7:
				value = this.renderPartialOverride(token,context,partials);
				break;
			case 8:
				value = this.renderTokens(this.resolveBlock(token,context).subTokens,context,partials,originalTemplate);
				break;
			}
			if(value != null) {
				buffer += value;
			}
		}
		return buffer;
	}
	,renderSection: function(token,context,partials,originalTemplate) {
		var _gthis = this;
		var _g = Mustache.getSectionValueKind(context.lookup(token.value));
		switch(_g[1]) {
		case 0:
			return null;
		case 1:
			var arr = _g[2];
			var buffer = "";
			var len = arr.length;
			var _g1 = 0;
			while(_g1 < len) buffer += this.renderTokens(token.subTokens,new mustache__$Context_ContextImpl(arr[_g1++],context,null),partials,originalTemplate);
			return buffer;
		case 2:
			return this.renderTokens(token.subTokens,new mustache__$Context_ContextImpl(_g[2],context,null),partials,originalTemplate);
		case 3:
			return this.renderTokens(token.subTokens,context,partials,originalTemplate);
		case 4:
			return _g[2](originalTemplate.substring(token.endIndex,token.sectionEndIndex),function(template) {
				return _gthis.render(template,context,partials);
			});
		}
	}
	,renderInverted: function(token,context,partials,originalTemplate) {
		if(Mustache.getSectionValueKind(context.lookup(token.value))[1] == 0) {
			return this.renderTokens(token.subTokens,context,partials,originalTemplate);
		} else {
			return null;
		}
	}
	,renderPartial: function(token,context,partials) {
		if(partials == null) {
			return null;
		}
		var value = partials(token.value);
		if(value != null) {
			return this.renderTokens(this.parse(value),context,partials,value);
		}
		return null;
	}
	,renderPartialOverride: function(token,context,partials) {
		if(partials == null) {
			return null;
		}
		var value = partials(token.value);
		if(value == null) {
			return null;
		}
		return this.renderTokens(this.parse(value),new mustache__$Context_ContextImpl({ },context,token),partials,value);
	}
	,resolveBlock: function(token,context) {
		var resultToken = token;
		while(context != null) {
			if(context.partialOverride != null) {
				var _g = 0;
				var _g1 = context.partialOverride.subTokens;
				while(_g < _g1.length) {
					var overrideToken = _g1[_g];
					++_g;
					if(overrideToken.type == mustache_TokenType.Block && overrideToken.value == token.value) {
						resultToken = overrideToken;
					}
				}
			}
			context = context.parent;
		}
		return resultToken;
	}
};
var Mustache = function() { };
Mustache.__name__ = true;
Mustache.parseTemplate = function(template,tags) {
	if(template.length == 0) {
		return [];
	}
	var sections = [];
	var tokens = [];
	var spaces = [];
	var hasTag = false;
	var nonSpace = false;
	var openingTagRe;
	var closingTagRe;
	var closingCurlyRe;
	var compileTags = function(tagsToCompile) {
		if(tagsToCompile.length != 2) {
			throw new js__$Boot_HaxeError("Invalid tags: " + Std.string(tagsToCompile));
		}
		openingTagRe = new EReg(Mustache.escapeRegExp(tagsToCompile[0]) + "\\s*","");
		closingTagRe = new EReg("\\s*" + Mustache.escapeRegExp(tagsToCompile[1]),"");
		closingCurlyRe = new EReg("\\s*" + Mustache.escapeRegExp("}" + tagsToCompile[1]),"");
	};
	compileTags(tags != null?tags:Mustache.tags);
	var scanner = new mustache_Scanner(template);
	while(scanner.tail != "") {
		var start = scanner.pos;
		var value = scanner.scanUntil(openingTagRe);
		if(value.length > 0) {
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var chr = value.charAt(_g1++);
				if(!Mustache.nonSpaceRe.match(chr)) {
					spaces.push(tokens.length);
				} else {
					nonSpace = true;
				}
				tokens.push(new mustache_Token(mustache_TokenType.Text,chr,start,start + 1));
				++start;
				if(chr == "\n") {
					if(hasTag && !nonSpace) {
						var _g2 = 0;
						while(_g2 < spaces.length) {
							var idx = spaces[_g2];
							++_g2;
							tokens[idx] = null;
						}
					}
					spaces = [];
					hasTag = false;
					nonSpace = false;
				}
			}
		}
		if(scanner.scan(openingTagRe).length == 0) {
			break;
		}
		hasTag = true;
		var type = scanner.scan(Mustache.tagRe);
		if(type.length > 0) {
			scanner.scan(Mustache.whiteRe);
		}
		if(type == "=") {
			value = scanner.scanUntil(Mustache.equalsRe);
			scanner.scan(Mustache.equalsRe);
			scanner.scanUntil(closingTagRe);
		} else if(type == "{") {
			value = scanner.scanUntil(closingCurlyRe);
			scanner.scan(Mustache.curlyRe);
			scanner.scanUntil(closingTagRe);
			type = "&";
		} else {
			value = scanner.scanUntil(closingTagRe);
		}
		if(scanner.scan(closingTagRe).length == 0) {
			throw new js__$Boot_HaxeError("Unclosed tag at " + scanner.pos);
		}
		var tokenType;
		switch(type) {
		case "":
			tokenType = mustache_TokenType.Value(true);
			break;
		case "!":
			tokenType = mustache_TokenType.Comment;
			break;
		case "#":
			tokenType = mustache_TokenType.Section(false);
			break;
		case "$":
			tokenType = mustache_TokenType.Block;
			break;
		case "&":
			tokenType = mustache_TokenType.Value(false);
			break;
		case "/":
			tokenType = mustache_TokenType.SectionClose;
			break;
		case "<":
			tokenType = mustache_TokenType.PartialOverride;
			break;
		case "=":
			tokenType = mustache_TokenType.SetDelimiters;
			break;
		case ">":
			tokenType = mustache_TokenType.Partial;
			break;
		case "^":
			tokenType = mustache_TokenType.Section(true);
			break;
		default:
			throw new js__$Boot_HaxeError("unknown token type: " + type);
		}
		var token = new mustache_Token(tokenType,value,start,scanner.pos);
		tokens.push(token);
		switch(tokenType[1]) {
		case 1:
			nonSpace = true;
			break;
		case 2:case 7:case 8:
			sections.push(token);
			break;
		case 3:
			var openSection = sections.pop();
			if(openSection == null) {
				throw new js__$Boot_HaxeError("Unopened section \"" + value + "\" at " + start);
			}
			if(openSection.value != value) {
				throw new js__$Boot_HaxeError("Unclosed section \"" + openSection.value + "\" at " + start);
			}
			break;
		case 6:
			compileTags(Mustache.spaceRe.split(value));
			break;
		default:
		}
	}
	var openSection1 = sections.pop();
	if(openSection1 != null) {
		throw new js__$Boot_HaxeError("Unclosed section \"" + openSection1.value + "\" at " + scanner.pos);
	}
	return Mustache.nestTokens(Mustache.squashTokens(tokens));
};
Mustache.squashTokens = function(tokens) {
	var squashedTokens = [];
	var lastToken = null;
	var _g = 0;
	while(_g < tokens.length) {
		var token = tokens[_g];
		++_g;
		if(token != null) {
			if(token.type == mustache_TokenType.Text && lastToken != null && lastToken.type == mustache_TokenType.Text) {
				lastToken.value += token.value;
				lastToken.endIndex = token.endIndex;
			} else {
				squashedTokens.push(token);
				lastToken = token;
			}
		}
	}
	return squashedTokens;
};
Mustache.nestTokens = function(tokens) {
	var nestedTokens = [];
	var collector = nestedTokens;
	var sections = [];
	var _g = 0;
	while(_g < tokens.length) {
		var token = tokens[_g];
		++_g;
		switch(token.type[1]) {
		case 2:case 7:case 8:
			collector.push(token);
			sections.push(token);
			collector = token.subTokens = [];
			break;
		case 3:
			var section = sections.pop();
			section.sectionEndIndex = token.startIndex;
			if(sections.length > 0) {
				collector = sections[sections.length - 1].subTokens;
			} else {
				collector = nestedTokens;
			}
			break;
		default:
			collector.push(token);
		}
	}
	return nestedTokens;
};
Mustache.escapeRegExp = function(string) {
	return Mustache.escapeRegExpRe.map(string,function(r) {
		return "\\" + r.matched(0);
	});
};
Mustache.escape = function(string) {
	return Mustache.escapeRe.map(string,function(re) {
		var key = re.matched(0);
		var _this = Mustache.entityMap;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	});
};
Mustache.getSectionValueKind = function(value) {
	if(value == null) {
		return SectionValueKind.KFalsy;
	}
	if(typeof(value) == "boolean") {
		if(value) {
			return SectionValueKind.KBasic;
		} else {
			return SectionValueKind.KFalsy;
		}
	}
	if(typeof(value) == "number") {
		if(value != 0) {
			return SectionValueKind.KBasic;
		} else {
			return SectionValueKind.KFalsy;
		}
	}
	var value1 = value;
	var str = (value1 instanceof String)?value1:null;
	if(str != null) {
		if(str.length > 0) {
			return SectionValueKind.KObject(str);
		} else {
			return SectionValueKind.KFalsy;
		}
	}
	var value2 = value;
	var arr = (value2 instanceof Array)?value2:null;
	if(arr != null) {
		if(arr.length > 0) {
			return SectionValueKind.KArray(arr);
		} else {
			return SectionValueKind.KFalsy;
		}
	}
	if(Reflect.isFunction(value)) {
		return SectionValueKind.KFunction(value);
	}
	if(Reflect.isObject(value)) {
		return SectionValueKind.KObject(value);
	}
	return SectionValueKind.KBasic;
};
var SectionValueKind = { __ename__ : true, __constructs__ : ["KFalsy","KArray","KObject","KBasic","KFunction"] };
SectionValueKind.KFalsy = ["KFalsy",0];
SectionValueKind.KFalsy.toString = $estr;
SectionValueKind.KFalsy.__enum__ = SectionValueKind;
SectionValueKind.KArray = function(a) { var $x = ["KArray",1,a]; $x.__enum__ = SectionValueKind; $x.toString = $estr; return $x; };
SectionValueKind.KObject = function(o) { var $x = ["KObject",2,o]; $x.__enum__ = SectionValueKind; $x.toString = $estr; return $x; };
SectionValueKind.KBasic = ["KBasic",3];
SectionValueKind.KBasic.toString = $estr;
SectionValueKind.KBasic.__enum__ = SectionValueKind;
SectionValueKind.KFunction = function(f) { var $x = ["KFunction",4,f]; $x.__enum__ = SectionValueKind; $x.toString = $estr; return $x; };
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var mustache__$Context_ContextImpl = function(view,parentContext,partialOverride) {
	this.view = view;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["."] != null) {
		_g.setReserved(".",view);
	} else {
		_g.h["."] = view;
	}
	this.cache = _g;
	this.parent = parentContext;
	this.partialOverride = partialOverride;
};
mustache__$Context_ContextImpl.__name__ = true;
mustache__$Context_ContextImpl.prototype = {
	lookup: function(name) {
		var value = null;
		var _this = this.cache;
		if(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name)) {
			var _this1 = this.cache;
			value = __map_reserved[name] != null?_this1.getReserved(name):_this1.h[name];
		} else {
			var context = this;
			var lookupHit = false;
			while(context != null) {
				if(name.indexOf(".") > 0) {
					value = context.view;
					var names = name.split(".");
					var index = 0;
					while(value != null && index < names.length) {
						if(index == names.length - 1) {
							lookupHit = Object.prototype.hasOwnProperty.call(value,names[index]);
						}
						value = Reflect.field(value,names[index++]);
					}
				} else {
					value = Reflect.field(context.view,name);
					lookupHit = Object.prototype.hasOwnProperty.call(context.view,name);
				}
				if(lookupHit) {
					break;
				}
				context = context.parent;
			}
			var v = value;
			var _this2 = this.cache;
			if(__map_reserved[name] != null) {
				_this2.setReserved(name,v);
			} else {
				_this2.h[name] = v;
			}
		}
		if(Reflect.isFunction(value)) {
			value = value();
		}
		return value;
	}
};
var mustache_Scanner = function(string) {
	this.string = string;
	this.tail = string;
	this.pos = 0;
};
mustache_Scanner.__name__ = true;
mustache_Scanner.prototype = {
	scan: function(re) {
		if(!re.match(this.tail)) {
			return "";
		}
		var p = re.matchedPos();
		if(p.pos != 0) {
			return "";
		}
		this.tail = this.tail.substring(p.len);
		this.pos += p.len;
		return re.matched(0);
	}
	,scanUntil: function(re) {
		var match;
		if(re.match(this.tail)) {
			var p = re.matchedPos();
			if(p.pos == 0) {
				match = "";
			} else {
				match = this.tail.substring(0,p.pos);
				this.tail = this.tail.substring(p.pos);
			}
		} else {
			match = this.tail;
			this.tail = "";
		}
		this.pos += match.length;
		return match;
	}
};
var mustache_TokenType = { __ename__ : true, __constructs__ : ["Text","Value","Section","SectionClose","Partial","Comment","SetDelimiters","PartialOverride","Block"] };
mustache_TokenType.Text = ["Text",0];
mustache_TokenType.Text.toString = $estr;
mustache_TokenType.Text.__enum__ = mustache_TokenType;
mustache_TokenType.Value = function(escaped) { var $x = ["Value",1,escaped]; $x.__enum__ = mustache_TokenType; $x.toString = $estr; return $x; };
mustache_TokenType.Section = function(inverted) { var $x = ["Section",2,inverted]; $x.__enum__ = mustache_TokenType; $x.toString = $estr; return $x; };
mustache_TokenType.SectionClose = ["SectionClose",3];
mustache_TokenType.SectionClose.toString = $estr;
mustache_TokenType.SectionClose.__enum__ = mustache_TokenType;
mustache_TokenType.Partial = ["Partial",4];
mustache_TokenType.Partial.toString = $estr;
mustache_TokenType.Partial.__enum__ = mustache_TokenType;
mustache_TokenType.Comment = ["Comment",5];
mustache_TokenType.Comment.toString = $estr;
mustache_TokenType.Comment.__enum__ = mustache_TokenType;
mustache_TokenType.SetDelimiters = ["SetDelimiters",6];
mustache_TokenType.SetDelimiters.toString = $estr;
mustache_TokenType.SetDelimiters.__enum__ = mustache_TokenType;
mustache_TokenType.PartialOverride = ["PartialOverride",7];
mustache_TokenType.PartialOverride.toString = $estr;
mustache_TokenType.PartialOverride.__enum__ = mustache_TokenType;
mustache_TokenType.Block = ["Block",8];
mustache_TokenType.Block.toString = $estr;
mustache_TokenType.Block.__enum__ = mustache_TokenType;
var mustache_Token = function(type,value,startIndex,endIndex,subTokens,sectionEndIndex) {
	this.type = type;
	this.value = value;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
	this.subTokens = subTokens;
	this.sectionEndIndex = sectionEndIndex;
};
mustache_Token.__name__ = true;
String.__name__ = true;
Array.__name__ = true;
var __map_reserved = {}
Mustache.tags = ["{{","}}"];
Mustache.tagRe = new EReg("#|\\^|/|>|\\{|&|=|<|\\$|!","");
Mustache.whiteRe = new EReg("\\s*","");
Mustache.spaceRe = new EReg("\\s+","");
Mustache.equalsRe = new EReg("\\s*=","");
Mustache.curlyRe = new EReg("\\s*\\}","");
Mustache.defaultWriter = new mustache_Writer();
Mustache.escapeRegExpRe = new EReg("[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]","g");
Mustache.nonSpaceRe = new EReg("\\S","");
Mustache.entityMap = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["&"] != null) {
		_g.setReserved("&","&amp;");
	} else {
		_g.h["&"] = "&amp;";
	}
	if(__map_reserved["<"] != null) {
		_g.setReserved("<","&lt;");
	} else {
		_g.h["<"] = "&lt;";
	}
	if(__map_reserved[">"] != null) {
		_g.setReserved(">","&gt;");
	} else {
		_g.h[">"] = "&gt;";
	}
	if(__map_reserved["\""] != null) {
		_g.setReserved("\"","&quot;");
	} else {
		_g.h["\""] = "&quot;";
	}
	if(__map_reserved["'"] != null) {
		_g.setReserved("'","&#39;");
	} else {
		_g.h["'"] = "&#39;";
	}
	if(__map_reserved["/"] != null) {
		_g.setReserved("/","&#x2F;");
	} else {
		_g.h["/"] = "&#x2F;";
	}
	if(__map_reserved["`"] != null) {
		_g.setReserved("`","&#x60;");
	} else {
		_g.h["`"] = "&#x60;";
	}
	if(__map_reserved["="] != null) {
		_g.setReserved("=","&#x3D;");
	} else {
		_g.h["="] = "&#x3D;";
	}
	$r = _g;
	return $r;
}(this));
Mustache.escapeRe = new EReg("[&<>\"'`=/]","g");
Main.main();
})();
